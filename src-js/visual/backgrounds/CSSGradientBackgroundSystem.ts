/**
 * CSSGradientBackgroundSystem - CSS Fallback Visual Backend
 * 
 * Provides a pure CSS gradient background as the universal fallback for
 * the progressive enhancement ladder. Always available and performant.
 * 
 * @architecture Year3000System VisualBackplane
 * @performance Ultra-lightweight, no JavaScript animation
 * @accessibility Full support for prefers-reduced-motion
 */

import { 
  VisualBackplane, 
  IManagedSystem, 
  HealthCheckResult, 
  RGBStop, 
  MusicMetrics, 
  PerformanceConstraints, 
  BackendCapabilities 
} from '@/types/systems';
import { CSSVariableBatcher } from '@/core/performance/CSSVariableBatcher';

export interface CSSGradientConfig {
  enableMusicSync: boolean;
  enableAnimations: boolean;
  fadeTransitions: boolean;
  quality: 'low' | 'medium' | 'high';
}

/**
 * CSS Gradient Background System - Universal Fallback Backend
 */
export class CSSGradientBackgroundSystem implements VisualBackplane {
  public readonly backendId = 'css' as const;
  public readonly isReady = true; // CSS is always ready
  public initialized = false;
  
  public readonly capabilities: BackendCapabilities = {
    webgl: false,
    webgl2: false,
    webgpu: false,
    highPerformance: false,
    maxTextureSize: 0,
    maxShaderComplexity: 'low'
  };
  
  private cssVariableBatcher: CSSVariableBatcher;
  private rootElement: HTMLElement | null = null;
  private backgroundElement: HTMLDivElement | null = null;
  
  private config: CSSGradientConfig;
  private constraints: PerformanceConstraints;
  private enabled = false;
  private currentPalette: RGBStop[] = [];
  private currentMusicMetrics: MusicMetrics | null = null;
  
  // Performance tracking
  private lastFrameTime = 0;
  private frameCount = 0;
  private memoryUsage = 0;
  
  constructor(\n    cssVariableBatcher: CSSVariableBatcher,\n    config: Partial<CSSGradientConfig> = {}\n  ) {\n    this.cssVariableBatcher = cssVariableBatcher;\n    \n    this.config = {\n      enableMusicSync: true,\n      enableAnimations: true,\n      fadeTransitions: true,\n      quality: 'medium',\n      ...config\n    };\n    \n    this.constraints = {\n      targetFPS: 60,\n      maxMemoryMB: 5, // Very low memory usage\n      cpuBudgetPercent: 2, // Minimal CPU usage\n      gpuBudgetPercent: 0, // No GPU usage\n      qualityLevel: 'medium'\n    };\n  }\n  \n  /**\n   * Initialize CSS gradient system\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n    \n    try {\n      // CSS is always \"ready\" - no async initialization needed\n      this.initialized = true;\n      \n      console.log('[CSSGradientBackgroundSystem] Initialized (fallback backend)');\n    } catch (error) {\n      console.error('[CSSGradientBackgroundSystem] Initialization failed:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Initialize with DOM element\n   */\n  async init(root: HTMLElement, constraints?: PerformanceConstraints): Promise<void> {\n    this.rootElement = root;\n    \n    if (constraints) {\n      this.constraints = { ...constraints };\n    }\n    \n    await this.initialize();\n    this.createBackgroundElement();\n    this.setupAccessibilitySupport();\n    \n    console.log('[CSSGradientBackgroundSystem] Backend initialized with root element');\n  }\n  \n  /**\n   * Update color palette via CSS custom properties\n   */\n  setPalette(stops: RGBStop[], transition: number = 500): void {\n    this.currentPalette = [...stops];\n    \n    if (stops.length === 0) return;\n    \n    // Convert RGBStops to CSS gradient\n    const gradientStops = stops.map(stop => \n      `rgb(${Math.round(stop.r)}, ${Math.round(stop.g)}, ${Math.round(stop.b)}) ${Math.round(stop.position * 100)}%`\n    ).join(', ');\n    \n    // Create multiple gradient variants for visual interest\n    const primaryGradient = `linear-gradient(135deg, ${gradientStops})`;\n    const secondaryGradient = `radial-gradient(ellipse at 30% 70%, ${gradientStops})`;\n    const accentGradient = `conic-gradient(from 45deg at 50% 50%, ${gradientStops})`;\n    \n    // Update CSS variables with graceful transition\n    this.cssVariableBatcher.setProperty('--sn.bg.css.primary-gradient', primaryGradient);\n    this.cssVariableBatcher.setProperty('--sn.bg.css.secondary-gradient', secondaryGradient);\n    this.cssVariableBatcher.setProperty('--sn.bg.css.accent-gradient', accentGradient);\n    \n    // Set transition duration\n    if (this.config.fadeTransitions) {\n      this.cssVariableBatcher.setProperty('--sn.bg.css.transition-duration', `${transition}ms`);\n    }\n    \n    // Update background element directly for immediate visual feedback\n    if (this.backgroundElement && this.enabled) {\n      this.updateBackgroundElement();\n    }\n    \n    console.log('[CSSGradientBackgroundSystem] Palette updated', {\n      stops: stops.length,\n      transition,\n      enabled: this.enabled\n    });\n  }\n  \n  /**\n   * Update music synchronization (minimal CPU impact)\n   */\n  setMusicMetrics(metrics: MusicMetrics): void {\n    this.currentMusicMetrics = metrics;\n    \n    if (!this.config.enableMusicSync || !this.enabled) return;\n    \n    // Only update critical music variables for CSS animations\n    if (metrics.beatIntensity !== undefined) {\n      // Scale beat intensity for subtle CSS effects\n      const scaledIntensity = Math.min(metrics.beatIntensity * 0.3, 0.3); // Max 30% intensity\n      this.cssVariableBatcher.setProperty(\n        '--sn.bg.css.beat-intensity', \n        scaledIntensity.toString()\n      );\n    }\n    \n    if (metrics.energy !== undefined) {\n      // Use energy for gradient saturation\n      const saturation = 0.8 + (metrics.energy * 0.4); // 0.8 to 1.2 range\n      this.cssVariableBatcher.setProperty(\n        '--sn.bg.css.energy-saturation', \n        saturation.toString()\n      );\n    }\n    \n    if (metrics.valence !== undefined) {\n      // Use valence for gradient brightness\n      const brightness = 0.9 + (metrics.valence * 0.2); // 0.9 to 1.1 range\n      this.cssVariableBatcher.setProperty(\n        '--sn.bg.css.valence-brightness', \n        brightness.toString()\n      );\n    }\n  }\n  \n  /**\n   * Update performance constraints\n   */\n  setPerformanceConstraints(constraints: PerformanceConstraints): void {\n    this.constraints = { ...constraints };\n    \n    // Adjust quality based on constraints\n    switch (constraints.qualityLevel) {\n      case 'low':\n        this.config.enableAnimations = false;\n        this.config.enableMusicSync = false;\n        break;\n      case 'medium':\n        this.config.enableAnimations = true;\n        this.config.enableMusicSync = false;\n        break;\n      case 'high':\n      case 'ultra':\n        this.config.enableAnimations = true;\n        this.config.enableMusicSync = true;\n        break;\n    }\n    \n    this.updateQualitySettings();\n    \n    console.log('[CSSGradientBackgroundSystem] Performance constraints updated', {\n      quality: constraints.qualityLevel,\n      animations: this.config.enableAnimations,\n      musicSync: this.config.enableMusicSync\n    });\n  }\n  \n  /**\n   * Enable/disable the CSS backend\n   */\n  setEnabled(enabled: boolean, fadeMs: number = 500): void {\n    if (this.enabled === enabled) return;\n    \n    this.enabled = enabled;\n    \n    if (this.backgroundElement) {\n      if (enabled) {\n        // Fade in\n        this.backgroundElement.style.transition = `opacity ${fadeMs}ms ease-in-out`;\n        this.backgroundElement.style.opacity = '1';\n        this.backgroundElement.style.pointerEvents = 'none';\n        \n        // Apply current palette\n        if (this.currentPalette.length > 0) {\n          this.updateBackgroundElement();\n        }\n      } else {\n        // Fade out\n        this.backgroundElement.style.transition = `opacity ${fadeMs}ms ease-in-out`;\n        this.backgroundElement.style.opacity = '0';\n        \n        // Clean up after fade\n        setTimeout(() => {\n          if (!this.enabled && this.backgroundElement) {\n            this.backgroundElement.style.pointerEvents = 'none';\n          }\n        }, fadeMs);\n      }\n    }\n    \n    // Update global CSS variable\n    this.cssVariableBatcher.setProperty('--sn.bg.css.enabled', enabled ? '1' : '0');\n    \n    console.log(`[CSSGradientBackgroundSystem] ${enabled ? 'Enabled' : 'Disabled'} with ${fadeMs}ms fade`);\n  }\n  \n  /**\n   * Get performance metrics (minimal for CSS)\n   */\n  getPerformanceMetrics() {\n    return {\n      fps: 60, // CSS is always smooth\n      memoryUsageMB: this.memoryUsage,\n      cpuUsagePercent: this.config.enableAnimations ? 1 : 0,\n      gpuUsagePercent: 0, // No GPU usage\n      frameTimeMs: this.lastFrameTime\n    };\n  }\n  \n  /**\n   * Handle resize events\n   */\n  resize(width: number, height: number): void {\n    if (this.backgroundElement) {\n      this.backgroundElement.style.width = `${width}px`;\n      this.backgroundElement.style.height = `${height}px`;\n    }\n  }\n  \n  /**\n   * Apply accessibility preferences\n   */\n  applyAccessibilityPreferences(preferences: {\n    reducedMotion: boolean;\n    highContrast: boolean;\n    prefersTransparency: boolean;\n  }): void {\n    if (preferences.reducedMotion) {\n      this.config.enableAnimations = false;\n      this.config.enableMusicSync = false;\n      \n      // Disable all animations via CSS\n      this.cssVariableBatcher.setProperty('--sn.bg.css.animations-enabled', '0');\n    } else {\n      this.config.enableAnimations = true;\n      this.cssVariableBatcher.setProperty('--sn.bg.css.animations-enabled', '1');\n    }\n    \n    if (preferences.highContrast) {\n      // Increase contrast for accessibility\n      this.cssVariableBatcher.setProperty('--sn.bg.css.contrast-boost', '1.3');\n    } else {\n      this.cssVariableBatcher.setProperty('--sn.bg.css.contrast-boost', '1.0');\n    }\n    \n    if (preferences.prefersTransparency) {\n      this.cssVariableBatcher.setProperty('--sn.bg.css.transparency-factor', '0.9');\n    } else {\n      this.cssVariableBatcher.setProperty('--sn.bg.css.transparency-factor', '1.0');\n    }\n    \n    this.updateBackgroundElement();\n  }\n  \n  /**\n   * Animation update (minimal processing)\n   */\n  updateAnimation(deltaTime: number): void {\n    this.lastFrameTime = deltaTime;\n    this.frameCount++;\n    \n    // No heavy animation processing needed for CSS backend\n    // CSS handles animations natively\n  }\n  \n  /**\n   * Health check (always healthy)\n   */\n  async healthCheck(): Promise<HealthCheckResult> {\n    const issues: string[] = [];\n    \n    // Check if DOM element exists\n    if (!this.backgroundElement && this.initialized) {\n      issues.push('Background element not created');\n    }\n    \n    // Check if CSS variables are set\n    if (this.currentPalette.length === 0) {\n      issues.push('No color palette set');\n    }\n    \n    return {\n      ok: issues.length === 0,\n      details: issues.length > 0 ? 'CSS backend has minor issues' : 'CSS backend healthy',\n      issues\n    };\n  }\n  \n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    // Remove DOM element\n    if (this.backgroundElement) {\n      this.backgroundElement.remove();\n      this.backgroundElement = null;\n    }\n    \n    this.rootElement = null;\n    this.currentPalette = [];\n    this.currentMusicMetrics = null;\n    this.enabled = false;\n    this.initialized = false;\n    \n    console.log('[CSSGradientBackgroundSystem] Destroyed');\n  }\n  \n  // ========================================================================\n  // PRIVATE METHODS\n  // ========================================================================\n  \n  private createBackgroundElement(): void {\n    if (!this.rootElement) {\n      console.warn('[CSSGradientBackgroundSystem] No root element provided');\n      return;\n    }\n    \n    // Create background container\n    this.backgroundElement = document.createElement('div');\n    this.backgroundElement.className = 'sn-css-gradient-background';\n    this.backgroundElement.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100vw;\n      height: 100vh;\n      z-index: var(--sn.layout.z.background, -11);\n      opacity: 0;\n      pointer-events: none;\n      transition: opacity 500ms ease-in-out;\n      will-change: opacity;\n    `;\n    \n    // Insert at the beginning of root element\n    this.rootElement.insertBefore(this.backgroundElement, this.rootElement.firstChild);\n    \n    // Apply initial styles\n    this.updateBackgroundElement();\n    \n    console.log('[CSSGradientBackgroundSystem] Background element created');\n  }\n  \n  private updateBackgroundElement(): void {\n    if (!this.backgroundElement) return;\n    \n    // Build CSS background based on quality settings\n    let backgroundCSS = '';\n    \n    if (this.config.quality === 'low') {\n      // Simple linear gradient\n      backgroundCSS = `\n        background: var(--sn.bg.css.primary-gradient, linear-gradient(135deg, #1e1e2e 0%, #313244 100%));\n      `;\n    } else if (this.config.quality === 'medium') {\n      // Dual gradient blend\n      backgroundCSS = `\n        background: \n          var(--sn.bg.css.primary-gradient, linear-gradient(135deg, #1e1e2e 0%, #313244 100%)),\n          var(--sn.bg.css.secondary-gradient, radial-gradient(ellipse at 30% 70%, #1e1e2e 0%, #313244 100%));\n        background-blend-mode: overlay;\n      `;\n    } else {\n      // Triple gradient blend with effects\n      backgroundCSS = `\n        background: \n          var(--sn.bg.css.primary-gradient, linear-gradient(135deg, #1e1e2e 0%, #313244 100%)),\n          var(--sn.bg.css.secondary-gradient, radial-gradient(ellipse at 30% 70%, #1e1e2e 0%, #313244 100%)),\n          var(--sn.bg.css.accent-gradient, conic-gradient(from 45deg, #1e1e2e 0%, #313244 100%));\n        background-blend-mode: overlay, multiply;\n        background-size: 100% 100%, 150% 150%, 200% 200%;\n      `;\n    }\n    \n    // Add music synchronization effects if enabled\n    if (this.config.enableMusicSync && this.config.enableAnimations) {\n      backgroundCSS += `\n        filter: \n          saturate(var(--sn.bg.css.energy-saturation, 1.0))\n          brightness(var(--sn.bg.css.valence-brightness, 1.0))\n          contrast(var(--sn.bg.css.contrast-boost, 1.0));\n        transform: scale(calc(1 + var(--sn.bg.css.beat-intensity, 0) * 0.02));\n      `;\n    }\n    \n    // Add transition properties\n    if (this.config.fadeTransitions) {\n      backgroundCSS += `\n        transition: \n          background var(--sn.bg.css.transition-duration, 500ms) ease-in-out,\n          filter 200ms ease-out,\n          transform 100ms ease-out;\n      `;\n    }\n    \n    this.backgroundElement.style.cssText += backgroundCSS;\n    \n    // Update memory usage estimate\n    this.memoryUsage = 0.5; // Minimal memory usage\n  }\n  \n  private setupAccessibilitySupport(): void {\n    // Listen for media query changes\n    const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    const highContrastQuery = window.matchMedia('(prefers-contrast: high)');\n    \n    const updateAccessibility = () => {\n      this.applyAccessibilityPreferences({\n        reducedMotion: reducedMotionQuery.matches,\n        highContrast: highContrastQuery.matches,\n        prefersTransparency: false // No standard media query for this\n      });\n    };\n    \n    reducedMotionQuery.addEventListener('change', updateAccessibility);\n    highContrastQuery.addEventListener('change', updateAccessibility);\n    \n    // Initial setup\n    updateAccessibility();\n  }\n  \n  private updateQualitySettings(): void {\n    // Update CSS variables based on quality settings\n    this.cssVariableBatcher.setProperty(\n      '--sn.bg.css.quality-level', \n      this.constraints.qualityLevel\n    );\n    this.cssVariableBatcher.setProperty(\n      '--sn.bg.css.animations-enabled', \n      this.config.enableAnimations ? '1' : '0'\n    );\n    this.cssVariableBatcher.setProperty(\n      '--sn.bg.css.music-sync-enabled', \n      this.config.enableMusicSync ? '1' : '0'\n    );\n    \n    // Update background element to reflect new settings\n    this.updateBackgroundElement();\n  }\n}