// ═══════════════════════════════════════════════════════════════════════════════
// 🌌 YEAR 3000 ARTIST AURA FIELDS - Phase 1 Implementation
// Ethereal artist aura system that radiates throughout entire artist pages
// Building on existing header soul consciousness for Spotify-compatible enhancement
// ═══════════════════════════════════════════════════════════════════════════════

@use "../core/mixins" as *;

// PHASE 1: Artist Aura Field Variables (Spotify-Safe)
// ═══════════════════════════════════════════════════════════════════════════════

:root {
  // === ARTIST AURA CORE CONSCIOUSNESS ===
  --artist-aura-intensity: calc(
    var(--header-soul-intensity, 0.6) * 0.8
  ); // Inherit from existing header soul
  --artist-aura-field-radius: calc(
    var(--header-cosmic-depth, 80px) * 2
  ); // Extended field from header
  --artist-aura-breathing-sync: var(
    --header-soul-breath-rate, 8s
  ); // Sync with existing breathing

  // === ARTIST-SPECIFIC SIGNATURE COLORS ===
  // TODO: Artist-specific theming hooks using [data-testid*="artist"] selectors
  --artist-aura-signature-primary: var(
    --header-soul-primary,
    rgba(var(--sn-gradient-primary-rgb, var(--spice-rgb-accent)), 0.18)
  );
  --artist-aura-signature-secondary: var(
    --header-soul-secondary,
    rgba(var(--sn-gradient-secondary-rgb, var(--spice-rgb-surface0)), 0.14)
  );
  --artist-aura-signature-accent: var(
    --header-soul-accent,
    rgba(var(--sn-gradient-accent-rgb, var(--spice-rgb-accent)), 0.2)
  );

  // === ATMOSPHERIC CASCADE INFLUENCE ===
  --aura-cascade-strength: 0.3; // How much aura influences page elements
  --aura-cascade-falloff: 0.7; // Distance falloff for aura effects
  --aura-cascade-transition: calc(
    var(--header-transition, 0.8s) * 1.2
  ); // Smooth transitions

  // === SPOTIFY-SAFE PERFORMANCE CONTROLS ===
  --aura-performance-mode: 1; // 1 = full effects, 0.5 = reduced, 0 = minimal
  --aura-memory-optimization: 1; // Prevents memory leaks in long sessions
}

// ═══════════════════════════════════════════════════════════════════════════════
// 🎯 ARTIST PAGE DETECTION (Spotify-Compatible Selectors)
// ═══════════════════════════════════════════════════════════════════════════════

// Target artist pages using Spotify's data attributes and class structure
// Defensive CSS with multiple fallback selectors for resilience
.main-view-container:has([data-testid*="artist"]),
.main-view-container:has(.main-entityHeader-container[data-testid*="artist"]),
.main-view-container:has(.main-entityHeader-title:contains("Artist")),
.main-view-container[data-testid*="artist"],
body:has(.main-entityHeader-container) .main-view-container {

  // === ARTIST AURA FIELD ACTIVATION ===
  position: relative;

  // Create page-wide aura field using positioned pseudo-element
  &::before {
    content: "";
    position: fixed; // Fixed positioning for full-page influence
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -10; // Behind all content, non-intrusive
    pointer-events: none; // Preserve Spotify's click functionality

    // TODO: Implement page-wide atmospheric cascade from artist headers
    background:
      // Primary aura field emanating from header area
      radial-gradient(
        ellipse 800% 300% at 50% 20%, // Centered on header area
        var(--artist-aura-signature-primary) 0%,
        transparent 35%
      ),
      // Secondary atmospheric flow
      linear-gradient(
        180deg,
        var(--artist-aura-signature-secondary) 0%,
        transparent 25%,
        var(--artist-aura-signature-accent) 75%,
        transparent 100%
      ),
      // Subtle whisper field for depth
      conic-gradient(
        from 0deg at 50% 20%,
        transparent 0%,
        var(--artist-aura-signature-primary) 25%,
        transparent 50%,
        var(--artist-aura-signature-accent) 75%,
        transparent 100%
      );

    // TODO: Add enhanced aura breathing animations synced with existing soul consciousness
    filter: blur(calc(var(--header-cosmic-blur, 12px) * 1.5))
      saturate(calc(var(--cosmic-saturation, 1.4) * 0.6))
      brightness(calc(1 + 0.04 * var(--artist-aura-intensity)));

    // Sync breathing with existing header soul system
    animation: artist-aura-breathing var(--artist-aura-breathing-sync)
      ease-in-out infinite;

    opacity: calc(
      var(--artist-aura-intensity) *
      var(--aura-performance-mode) *
      0.4  // Subtle page-wide presence
    );

    // TODO: Ensure backwards compatibility with current header styling
    transition: all var(--aura-cascade-transition);
  }

  // === ENHANCED HEADER INTEGRATION ===
  .main-entityHeader-container {
    // Strengthen existing header effects when aura is active
    position: relative;
    z-index: 2; // Above aura field

    // TODO: Add artist-specific theming hooks using [data-testid*="artist"] selectors
    &[data-testid*="artist"] {
      --header-soul-intensity: calc(var(--artist-aura-intensity) * 1.2);
      --header-soul-primary: var(--artist-aura-signature-primary);
      --header-soul-secondary: var(--artist-aura-signature-secondary);
      --header-soul-accent: var(--artist-aura-signature-accent);
    }
  }

  // === CONTENT AREA AURA INFLUENCE ===
  .main-content,
  .main-shelf-shelf,
  .main-gridContainer-gridContainer {
    position: relative;

    // Subtle aura influence on content areas
    &::before {
      content: "";
      position: absolute;
      inset: -8px;
      z-index: -1;
      pointer-events: none;

      background: linear-gradient(
        var(--artist-aura-signature-primary) 0%,
        transparent 20%
      );

      border-radius: 12px;
      opacity: calc(var(--artist-aura-intensity) * var(--aura-cascade-strength) * 0.15);

      // TODO: Ensure atmospheric effects don't conflict with existing card animations
      transition: opacity var(--aura-cascade-transition);
    }

    // Enhanced hover states influenced by aura
    &:hover::before {
      opacity: calc(var(--artist-aura-intensity) * var(--aura-cascade-strength) * 0.25);
    }
  }
}

// ═══════════════════════════════════════════════════════════════════════════════
// 🎬 ARTIST AURA ANIMATIONS (Sync with Existing Soul System)
// ═══════════════════════════════════════════════════════════════════════════════

@keyframes artist-aura-breathing {
  0%, 100% {
    transform: scale(1) rotate(0deg);
    opacity: 0.4;
    filter: brightness(1) hue-rotate(0deg) saturate(0.6);
  }
  25% {
    transform: scale(1.02) rotate(0.5deg);
    opacity: 0.6;
    filter: brightness(1.05) hue-rotate(5deg) saturate(0.8);
  }
  50% {
    transform: scale(1.04) rotate(0deg);
    opacity: 0.5;
    filter: brightness(1.08) hue-rotate(10deg) saturate(0.9);
  }
  75% {
    transform: scale(1.03) rotate(-0.3deg);
    opacity: 0.55;
    filter: brightness(1.03) hue-rotate(3deg) saturate(0.7);
  }
}

// ═══════════════════════════════════════════════════════════════════════════════
// ♿ ACCESSIBILITY & PERFORMANCE (Spotify-Safe)
// ═══════════════════════════════════════════════════════════════════════════════

// TODO: Add accessibility controls for aura intensity
@media (prefers-reduced-motion: reduce) {
  :root {
    --artist-aura-intensity: 0.2; // Minimal aura for accessibility
    --aura-performance-mode: 0.5; // Reduced performance impact
    --artist-aura-breathing-sync: 30s; // Very slow breathing
  }

  .main-view-container {
    &::before {
      animation-duration: 30s !important;
      filter: blur(6px) !important; // Reduced blur for performance
    }
  }
}

@media (prefers-contrast: high) {
  :root {
    --artist-aura-intensity: 0.8; // More visible for accessibility
    --aura-cascade-strength: 0.5; // Stronger influence for visibility
  }
}

// TODO: Implement Spotify-safe CSS selectors with fallback targets
@media (max-width: 768px) {
  :root {
    --artist-aura-intensity: 0.3; // Reduced for mobile performance
    --aura-performance-mode: 0.6; // Mobile optimization
  }

  .main-view-container::before {
    // Simplified mobile aura
    background: radial-gradient(
      ellipse 400% 200% at 50% 20%,
      var(--artist-aura-signature-primary) 0%,
      transparent 40%
    ) !important;
  }
}

// Performance optimization for older browsers
@supports not (backdrop-filter: blur(1px)) {
  .main-view-container::before {
    opacity: calc(var(--artist-aura-intensity) * 0.2) !important;
    filter: blur(3px) !important;
  }
}

// ═══════════════════════════════════════════════════════════════════════════════
// 🚫 SEARCH EXCLUSION GUARD (Maintain Existing Behavior)
// ═══════════════════════════════════════════════════════════════════════════════

// TODO: Maintain backwards compatibility with existing entity header system
// Disable aura fields in search to preserve search functionality
body:has(.main-searchPage-content) {
  .main-view-container::before {
    opacity: 0 !important;
    animation: none !important;
  }
}