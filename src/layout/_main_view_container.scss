// ████████████████████████████████████████████████████████████████████████████████
// YEAR 3000 MAIN VIEW CONTAINER - Enhanced Visual Experience
// ████████████████████████████████████████████████████████████████████████████████

@use "../core/_performance_mixins" as *;

// === YEAR 3000: Main View Container Styling ===
.main-view-container__scroll-node {
  position: relative; // Needed for pseudo-elements
  isolation: isolate; // Ensure pseudo-elements are behind content
  
  // =========================================================================
  // DYNAMIC ANIMATION PSEUDO-ELEMENTS (Performance Optimized)
  // =========================================================================
  
  // Replace 3x visual layer DOM elements with CSS pseudo-elements
  &::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 990;
    
    // Visual layer gradient (layer 1)
    background: radial-gradient(circle at 50% 50%, 
      rgba(var(--spice-rgb-accent, 168, 173, 200), calc(var(--dynamic-fog-opacity, 0.02) * 4)) 0%, 
      transparent 70%);
    
    // Apply dynamic layer animation - DISABLED: Caused global app bouncing
    // animation: dynamic-layer-animation var(--dynamic-animation-cycle, 2000ms) ease-in-out infinite;
    
    // Performance optimizations
    @include performance-hardware-acceleration;
    
    // Quality scaling for low-end devices
    @media (update: slow) {
      // animation-duration: calc(var(--dynamic-animation-cycle, 2000ms) * 2); // DISABLED: No longer needed
      will-change: auto;
    }
  }
  
  // Second visual layer
  &::after {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 991;
    
    // Cellular membrane gradient (layer 2) - offset position
    background: radial-gradient(circle at 70% 65%, 
      rgba(var(--spice-rgb-accent, 168, 173, 200), calc(var(--dynamic-fog-opacity, 0.02) * 3)) 0%, 
      transparent 70%);
    
    // Apply dynamic atmospheric pulse animation
    // animation: dynamic-atmospheric-pulse var(--dynamic-animation-cycle, 2000ms) ease-in-out infinite; // DISABLED: Caused global app bouncing
    // animation-delay: calc(var(--dynamic-animation-cycle, 2000ms) * 0.33);
    
    // Performance optimizations
    @include performance-hardware-acceleration;
    
    // Quality scaling for low-end devices
    @media (update: slow) {
      // animation-duration: calc(var(--dynamic-animation-cycle, 2000ms) * 2); // DISABLED: No longer needed
      will-change: auto;
    }
  }
}

// =========================================================================
// BREATHING ORGANISMS AS PSEUDO-ELEMENTS ON CARDS
// =========================================================================

// Apply breathing organisms to card containers instead of creating DOM elements
.card,
.main-card,
.artist-card,
.playlist-card,
.album-card {
  position: relative;
  
  // Breathing organism pseudo-element (replaces 5x DOM elements)
  &::before {
    content: '';
    position: absolute;
    top: calc(var(--dynamic-breathing-phase, 0) * 10% + 10%);
    right: calc(var(--dynamic-breathing-phase, 0) * 15% + 10%);
    width: calc(60px + var(--dynamic-growth-scale, 1) * 60px);
    height: calc(60px + var(--dynamic-growth-scale, 1) * 60px);
    border-radius: 50%;
    
    background: linear-gradient(45deg, 
      rgba(var(--spice-rgb-accent, 168, 173, 200), calc(var(--dynamic-shimmer-opacity, 0.05) * 2)) 0%, 
      rgba(var(--spice-rgb-accent, 168, 173, 200), var(--dynamic-shimmer-opacity, 0.05)) 100%);
    
    pointer-events: none;
    z-index: 1;
    
    // Apply dynamic element breathing animation - DISABLED: Caused global app bouncing
    // animation: dynamic-element-breathing var(--dynamic-animation-cycle, 2000ms) ease-in-out infinite;
    // animation-delay: calc(var(--dynamic-breathing-phase, 0) * 200ms);
    
    // Performance optimizations
    @include performance-hardware-acceleration;
    
    // Only show on cards that have visual effects enabled
    opacity: 0;
    transform: scale(0.5);
    transition: opacity 0.5s ease-out, transform 0.5s ease-out;
  }
  
  // Activate dynamic animations when visual effects are enabled
  &.dynamic-visual-effects-enabled::before {
    opacity: 1;
    transform: scale(1);
  }
  
  // Atmospheric particles as additional pseudo-element
  &::after {
    content: '';
    position: absolute;
    bottom: calc(var(--dynamic-breathing-phase, 0) * 5% + 5%);
    left: calc(var(--dynamic-breathing-phase, 0) * 10% + 5%);
    width: calc(2px + var(--dynamic-growth-scale, 1) * 2px);
    height: calc(2px + var(--dynamic-growth-scale, 1) * 2px);
    border-radius: 50%;
    
    background: rgba(var(--spice-rgb-accent, 168, 173, 200), 
      calc(var(--dynamic-glow-opacity, 0.1) * 6));
    
    pointer-events: none;
    z-index: 2;
    
    // Apply dynamic visual effects field animation
    // animation: dynamic-visual-effects-field calc(var(--dynamic-animation-cycle, 2000ms) * 2) ease-in-out infinite; // DISABLED: Caused global app bouncing
    // animation-delay: calc(var(--dynamic-breathing-phase, 0) * 100ms);
    
    // Performance optimizations
    @include performance-hardware-acceleration;
    
    // Only show on cards that have visual effects enabled
    opacity: 0;
    transform: scale(0);
    transition: opacity 0.8s ease-out, transform 0.8s ease-out;
  }
  
  // Activate atmospheric particle when visual effects are enabled
  &.dynamic-visual-effects-enabled::after {
    opacity: 1;
    transform: scale(1);
  }
}

// ==============================================
// Legacy Compatibility Aliases
// ==============================================
// Ensures backward compatibility during transition

// Class aliases for consciousness → visual effects
.main-view-container__scroll-node.dynamic-consciousness-enabled::before {
  opacity: 1;
  transform: scale(1);
}

.main-view-container__scroll-node.dynamic-consciousness-enabled::after {
  opacity: 1;
  transform: scale(1);
}

// Keyframe aliases for legacy animation names
@keyframes organic-membrane-breathing {
  0% { opacity: 1; transform: scale(1); }
  50% { opacity: 0.95; transform: scale(1.01); }
  100% { opacity: 1; transform: scale(1); }
}

@keyframes dynamic-consciousness-field {
  0% { opacity: 1; transform: translateX(0) translateY(0); }
  25% { opacity: 0.98; transform: translateX(1px) translateY(-0.5px); }
  50% { opacity: 0.96; transform: translateX(-0.5px) translateY(1px); }
  75% { opacity: 0.98; transform: translateX(-1px) translateY(-0.5px); }
  100% { opacity: 1; transform: translateX(0) translateY(0); }
}