// ████████████████████████████████████████████████████████████████████████████████
// YEAR 3000 REALITY BREACH ENHANCEMENT - Revolutionary Visual Experience
// ████████████████████████████████████████████████████████████████████████████████
@use "mixins" as *;
@use "../features/themed_interactive_components" as *;
@use "../sidebar/sidebar-consciousness" as *;
@use "../sidebar/sidebar_dimensional_nexus" as *;

// ████████████████████████████████████████████████████████████████████████████████
// BREATHING SCALE APPLICATION - Subtle Rhythm Synchronization
// ████████████████████████████████████████████████████████████████████████████████
:root {
  //Applybreathingscaletomaininterfaceelementsforsubtlerhythmsynctransform: scale(var(--sn-breathing-scale, 1));
  transform-origin: center;
  transition: transform 50ms ease-out; // Quick response to rhythm changes
}

:root .Root__main-view {
  // Duration in album view
  .UyzJidwrGk3awngSGIwv {
    color: var(--spice-subtext);
  }

  // For that small dot on podcasts that notify us of new episodes
  .main-home-content
    > section:first-child
    > .main-gridContainer-gridContainer
    > div
    span[aria-label],
  span[aria-label="New episode"],
  span[aria-label="New Podcast Episode"] {
    background: var(--spice-text);
  }

  // Enhanced button
  .Button-sm-buttonSecondary-useBrowserDefaultFocusStyle {
    background-color: var(--spice-base);
    color: var(--spice-text);
    border: 1px solid var(--spice-overlay1);

    &:hover {
      border-color: rgba(var(--sn-oklab-processed-bright-highlight-rgb), 0.7);
    }
  }

  // === YEAR 3000: Main View Container Styling ===
  .main-view-container__scroll-node {
    position: relative; // Needed for pseudo-elements
    isolation: isolate; // Ensure pseudo-elements are behind content

    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(
        ellipse at center,
        rgba(var(--sn-oklab-processed-bright-highlight-rgb), 0.02) 0%,
        transparent 60%
      );
      z-index: -1; // Behind content
      pointer-events: none;
      transition: background var(--sn-gradient-transition, 600ms ease);
    }
  }

  // === YEAR 3000: General Card Styling ===
  .main-card-card {
    position: relative;
    background-color: rgba(
      var(--spice-rgb-card, var(--spice-rgb-surface0)),
      0.3
    );
    border: 1px solid transparent;
    transition: background-color 300ms ease, border-color 300ms ease,
      transform 300ms ease, filter 300ms ease;
    overflow: hidden; // For pseudo-elements

    &::before {
      // Subtle persistent gradient overlay
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(
        135deg,
        rgba(
            var(--sn-oklab-processed-primary-rgb-r, 202),
            var(--sn-oklab-processed-primary-rgb-g, 158),
            var(--sn-oklab-processed-primary-rgb-b, 230),
            calc(var(--sn-gradient-opacity, 0.1) * 0.2)
          )
          0%,
        rgba(
            var(--sn-oklab-processed-secondary-rgb-r, 186),
            var(--sn-oklab-processed-secondary-rgb-g, 187),
            var(--sn-oklab-processed-secondary-rgb-b, 241),
            calc(var(--sn-gradient-opacity, 0.1) * 0.1)
          )
          100%
      );
      opacity: 0.5; // Keep it very subtle
      transition: opacity var(--sn-gradient-transition, 600ms ease),
        filter var(--sn-gradient-transition, 600ms ease);
      pointer-events: none;
    }

    &:hover {
      border-color: rgba(
        var(--sn-oklab-processed-primary-rgb-r, 202),
        var(--sn-oklab-processed-primary-rgb-g, 158),
        var(--sn-oklab-processed-primary-rgb-b, 230),
        0.3
      );
      background-color: rgba(
        var(--spice-rgb-card, var(--spice-rgb-surface0)),
        0.5
      );
      transform: translateY(-2px); // Slight lift

      &::before {
        opacity: 0.8; // Enhance gradient on hover
        filter: hue-rotate(
          calc((var(--sn-oklab-primary-hue, 180) - 180) * 0.08deg)
        );
      }
    }
  }

  // === YEAR 3000: Track List Container Styling ===
  .main-rootlist-wrapper {
    position: relative;
    background: transparent;

    // Add gentle gradient background
    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(
        180deg,
        rgba(var(--sn-gradient-primary-rgb, var(--spice-rgb-accent)), 0.15) 0%,
        // Significantly stronger start
        rgba(var(--sn-gradient-primary-rgb, var(--spice-rgb-accent)), 0.12) 30%,
        // Maintain strong presence
        transparent 65%,
        // Smooth but more decisive fade
        transparent 85%,
        // Transparent mid-bottom
        rgba(var(--sn-gradient-secondary-rgb, var(--spice-rgb-surface0)), 0.05)
          100% // Stronger bottom anchor
      );
      z-index: 0;
      pointer-events: none;
      transition: all var(--sn-gradient-transition, 600ms ease);
      -webkit-transition: all var(--sn-gradient-transition, 600ms ease);
      -moz-transition: all var(--sn-gradient-transition, 600ms ease);
      -ms-transition: all var(--sn-gradient-transition, 600ms ease);
      -o-transition: all var(--sn-gradient-transition, 600ms ease);
    }

    // Track list row grid enhancements
    .main-trackList-trackListRowGrid {
      position: relative;
      z-index: 1;
    }

    // Individual track row styling
    .main-trackList-trackListRow {
      position: relative;
      transition: all 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94);

      // Hover effect with dynamic colors
      &:hover {
        background: linear-gradient(
          90deg,
          rgba(
              var(--sn-oklab-processed-primary-rgb-r, 202),
              var(--sn-oklab-processed-primary-rgb-g, 158),
              var(--sn-oklab-processed-primary-rgb-b, 230),
              0.08
            )
            0%,
          rgba(
              var(--sn-oklab-processed-primary-rgb-r, 202),
              var(--sn-oklab-processed-primary-rgb-g, 158),
              var(--sn-oklab-processed-primary-rgb-b, 230),
              0.04
            )
            50%,
          transparent 100%
        );
        filter: brightness(
          calc(1 + (0.5 - var(--sn-oklab-primary-l, 0.5)) * 0.3)
        );
        -webkit-filter: brightness(
          calc(1 + (0.5 - var(--sn-oklab-primary-l, 0.5)) * 0.3)
        );
        backdrop-filter: blur(5px);

        // Add subtle side border
        &::before {
          content: "";
          position: absolute;
          left: 0;
          top: 50%; // Center vertically
          bottom: auto; // Remove bottom constraint
          height: 40px; // Set fixed height (e.g., matches album art)
          transform: translateY(-50%); // Adjust for vertical centering
          width: 3px;
          background: linear-gradient(
            180deg,
            rgba(
                var(--sn-oklab-processed-primary-rgb-r, 202),
                var(--sn-oklab-processed-primary-rgb-g, 158),
                var(--sn-oklab-processed-primary-rgb-b, 230),
                0.8
              )
              0%,
            rgba(
                var(--sn-oklab-processed-accent-rgb-r, 140),
                var(--sn-oklab-processed-accent-rgb-g, 170),
                var(--sn-oklab-processed-accent-rgb-b, 238),
                0.6
              )
              100%
          );
          border-radius: 0 2px 2px 0;
          transition: all 200ms ease;
        }
      }

      // Selected/active state
      &[aria-selected="true"] {
        background: linear-gradient(
          90deg,
          rgba(
              var(--sn-oklab-processed-primary-rgb-r, 202),
              var(--sn-oklab-processed-primary-rgb-g, 158),
              var(--sn-oklab-processed-primary-rgb-b, 230),
              0.12
            )
            0%,
          rgba(
              var(--sn-oklab-processed-secondary-rgb-r, 186),
              var(--sn-oklab-processed-secondary-rgb-g, 187),
              var(--sn-oklab-processed-secondary-rgb-b, 241),
              0.08
            )
            100%
        );
        filter: brightness(
          calc(1 + (0.5 - var(--sn-oklab-primary-l, 0.5)) * 0.15)
        );
        -webkit-filter: brightness(
          calc(1 + (0.5 - var(--sn-oklab-primary-l, 0.5)) * 0.15)
        );

        &::before {
          opacity: 1;
          transform: translateY(-50%) scaleY(1.5);
        }
      }
    }

    // Row marker (track numbers) styling
    .main-trackList-rowMarker {
      display: flex;
      align-items: center;
      justify-content: flex-end;
      padding-right: 12px;
      font-size: 1rem;
      font-weight: 600;
      color: var(--spice-subtext);
      transition: color 300ms ease;
      z-index: 1;
    }
  }
}

// Phase 1: Enhanced Gradient Consciousness

.main-entityHeader-container {
  position: relative;
  background: linear-gradient(
    145deg,
    rgba(
        var(--sn-header-primary-rgb, var(--spice-rgb-accent)),
        var(--sn-header-intensity, 0.2)
      )
      0%,
    rgba(
        var(--sn-header-secondary-rgb, var(--spice-rgb-surface0)),
        calc(var(--sn-header-intensity, 0.2) * 0.7)
      )
      40%,
    rgba(
        var(--sn-header-accent-rgb, var(--spice-rgb-surface1)),
        calc(var(--sn-header-intensity, 0.2) * 0.4)
      )
      100%
  );
  transition: background 800ms cubic-bezier(0.25, 0.46, 0.45, 0.94);

  .main-entityHeader-backgroundColor,
  .main-entityHeader-backgroundOverColorGradient {
    background: transparent !important;
  }

  .main-entityHeader-imageContainer,
  .main-entityHeader-headerText {
    position: relative;
    z-index: 1;
  }

  &::before {
    content: "";
    position: absolute;
    inset: 0;
    background: linear-gradient(
      45deg,
      transparent 30%,
      rgba(var(--sn-gradient-primary-rgb), 0.1) 50%,
      transparent 70%
    );
    backdrop-filter: blur(20px) brightness(1.2) contrast(1.1);
    border: 1px solid rgba(var(--sn-gradient-accent-rgb), 0.3);
    border-radius: 12px;
    box-shadow: inset 0 1px 0
        rgba(var(--sn-oklab-processed-bright-highlight-rgb), 0.1),
      0 0 20px rgba(var(--sn-gradient-primary-rgb), 0.2),
      0 0 40px rgba(var(--sn-gradient-accent-rgb), 0.1);
    animation: holographic-pulse 3s ease-in-out infinite;
  }
}

@keyframes holographic-pulse {
  0%,
  100% {
    transform: scale(1) perspective(1000px) rotateX(0deg);
    filter: hue-rotate(0deg);
  }
  50% {
    transform: scale(1.02) perspective(1000px) rotateX(1deg);
    filter: hue-rotate(10deg);
  }
}

.main-topBar-container {
  background: linear-gradient(
    90deg,
    rgba(
        var(--sn-header-primary-rgb, var(--spice-rgb-accent)),
        calc(var(--sn-header-intensity, 0.2) * 0.6)
      )
      0%,
    rgba(
        var(--sn-header-secondary-rgb, var(--spice-rgb-surface0)),
        calc(var(--sn-header-intensity, 0.2) * 0.4)
      )
      50%,
    rgba(
        var(--sn-header-accent-rgb, var(--spice-rgb-surface1)),
        calc(var(--sn-header-intensity, 0.2) * 0.25)
      )
      100%
  ) !important;
  backdrop-filter: blur(10px) saturate(1.1);
  border-bottom: 1px solid
    rgba(
      var(--sn-header-primary-rgb, var(--spice-rgb-accent)),
      calc(var(--sn-header-intensity, 0.2) * 0.5)
    );
  transition: background 800ms cubic-bezier(0.25, 0.46, 0.45, 0.94),
    border-bottom 800ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

// Action Bar integration for Phase 1 - YEAR 3000 HARMONIC OSCILLATION
.main-actionBarBackground-background {
  background: linear-gradient(
    calc(135deg + (var(--sn-rhythm-phase, 0) * 5deg)),
    // Kinetic Verb: HARMONIZE - Subtle angle oscillation
    rgba(
        var(--sn-header-primary-rgb, var(--spice-rgb-accent)),
        calc(var(--sn-header-intensity, 0.2) * 0.85)
      )
      0%,
    rgba(
        var(--sn-header-secondary-rgb, var(--spice-rgb-surface0)),
        calc(var(--sn-header-intensity, 0.2) * 0.75)
      )
      50%,
    rgba(
        var(--sn-header-accent-rgb, var(--spice-rgb-surface1)),
        calc(var(--sn-header-intensity, 0.2) * 0.65)
      )
      100%
  ) !important;
  backdrop-filter: blur(15px)
    saturate(calc(1.15 + (var(--sn-breathing-scale, 1) - 1) * 0.3));
  transition: background 800ms cubic-bezier(0.25, 0.46, 0.45, 0.94);

  // Kinetic Verb: REFRACT - Subtle hue breathing with rhythm
  filter: hue-rotate(calc(var(--sn-rhythm-phase, 0) * 2deg))
    brightness(calc(1 + (var(--sn-beat-pulse-intensity, 0) * 0.1)));
}

.main-actionBar-ActionBarRow {
  // Ensure content within the action bar is visually distinct
  // This might need further refinement based on specific child elements
  position: relative;
  z-index: 1;

  .main-playButton-PlayButton,
  .main-shuffleButton-button,
  .main-button-button {
    // Example: add subtle shadow to buttons for better contrast
    text-shadow: 0 0 5px rgba(var(--spice-rgb-shadow), 0.3);
    // Ensure button backgrounds are slightly translucent if desired
    // background-color: rgba(var(--spice-rgb-main), 0.1) !important;
  }
}

// Phase 2: Real-Time Beat Synchronization SCSS

// Define CSS variables used by BeatSyncVisualSystem if not already defined
// These are primarily set by JS, but can have fallbacks here.
:root {
  --sn-beat-pulse-intensity: 0; // Smoothed value from JS (0 to 1 typically)
  --sn-rhythm-phase: 0; // Continuous value from JS (radians)
  --sn-breathing-scale: 1; // Continuous value from JS (e.g., 0.95 to 1.05)
}

// Action Bar Beat Synchronization
.main-actionBar-ActionBarRow {
  // Continuous breathing effect based on rhythm
  transform: scale(var(--sn-breathing-scale, 1));
  transition: transform 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94); // Smooth transition for breathing

  // Pulse effect on beat detection - YEAR 3000 ENHANCED
  .main-playButton-PlayButton,
  .main-shuffleButton-button,
  .main-button-button {
    // Kinetic Verb: BLOOM - More pronounced pulse for stronger connection
    transform: scale(
      calc(1 + (var(--sn-beat-pulse-intensity, 0) * 0.12))
    ); // Enhanced pulse: max 12% size increase - sell the effect!
    transition: transform 120ms cubic-bezier(0.175, 0.885, 0.32, 1.375); // Snappier, bouncier pulse

    // Additional enhancement: subtle glow pulse
    box-shadow: 0 0 calc(8px * var(--sn-beat-pulse-intensity, 0))
      rgba(
        var(--sn-gradient-primary-rgb, var(--spice-rgb-accent)),
        calc(0.4 * var(--sn-beat-pulse-intensity, 0))
      );
  }

  // Optional: Background pulse for the entire action bar (can be intense)
  &::after {
    content: "";
    position: absolute;
    left: 10%; // Start inset from edges
    right: 10%; // End inset from edges
    top: 50%;
    height: 4px; // Fixed height for the bar
    transform: translateY(-50%) scaleX(var(--sn-beat-pulse-intensity, 0)); // Pulse width with beat, centered
    background: rgba(
      var(--sn-gradient-primary-rgb, var(--spice-rgb-accent)),
      0.7
    ); // Solid color for the bar, using a dynamic theme color
    opacity: var(--sn-beat-pulse-intensity, 0); // Fade in/out with beat
    transition: transform 250ms cubic-bezier(0.175, 0.885, 0.32, 1.275),
      opacity 200ms ease-out;
    pointer-events: none;
    border-radius: 2px; // Rounded ends for the bar
    z-index: 0; // Behind content
  }
}

// Now Playing Bar (Bottom Player) Beat Synchronization
.main-nowPlayingBar-nowPlayingBar {
  // Continuous breathing effect, slightly different to distinguish from Action Bar
  transform: scale(var(--sn-breathing-scale, 1));
  transition: transform 400ms cubic-bezier(0.25, 0.46, 0.45, 0.94);

  // Pulse on the heart icon - YEAR 3000 LOVE AMPLIFIER
  .main-addButton-button.control-button-heart {
    // Kinetic Verb: BLOOM - Love beats stronger!
    transform: scale(
      calc(1 + (var(--sn-beat-pulse-intensity, 0) * 0.15))
    ); // Enhanced heart pulse: max 15% size increase
    transition: transform 140ms cubic-bezier(0.175, 0.885, 0.32, 1.4);

    // Additional cosmic glow for heart
    filter: drop-shadow(
      0 0 calc(6px * var(--sn-beat-pulse-intensity, 0))
        rgba(
          var(--spice-rgb-red, 243, 139, 168),
          calc(0.6 * var(--sn-beat-pulse-intensity, 0))
        )
    );
  }
}

// General subtle pulse for cards on beat (optional, can be performance heavy)
/* Uncomment if desired and performance allows
.main-card-card {
  &:hover { // Only apply strong pulse on hover to save performance
     transform: translateY(-2px) scale(calc(1 + (var(--sn-beat-pulse-intensity, 0) * 0.02)));
  }
  transition: transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275);
}
*/

// Phase 3: Depth Layer System SCSS

:root {
  // Define CSS variables for each depth layer (e.g., up to 4 layers).
  // These will be controlled by the DepthLayerSystem in JS.
  // Layer 0 (Furthest)
  --sn-depth-layer-0-z: 75px;
  --sn-depth-layer-0-opacity: 0.05;
  --sn-depth-layer-0-blur: 2px;
  --sn-depth-layer-0-offset-y: 0px;
  --sn-depth-layer-0-hue-rotate: 0deg;
  --sn-depth-layer-0-scale: 1;
  // Layer 1
  --sn-depth-layer-1-z: 150px;
  --sn-depth-layer-1-opacity: 0.05;
  --sn-depth-layer-1-blur: 4px;
  --sn-depth-layer-1-offset-y: 0px;
  --sn-depth-layer-1-hue-rotate: 0deg;
  --sn-depth-layer-1-scale: 1;
  // Layer 2 (Not visually represented by default ::before/::after, but vars are available for other elements)
  --sn-depth-layer-2-z: 225px;
  --sn-depth-layer-2-opacity: 0.04;
  --sn-depth-layer-2-blur: 6px;
  --sn-depth-layer-2-offset-y: 0px;
  --sn-depth-layer-2-hue-rotate: 0deg;
  --sn-depth-layer-2-scale: 1;
  // Layer 3 (Innermost/closest if used this way)
  --sn-depth-layer-3-z: 300px;
  --sn-depth-layer-3-opacity: 0.03;
  --sn-depth-layer-3-blur: 8px;
  --sn-depth-layer-3-offset-y: 0px;
  --sn-depth-layer-3-hue-rotate: 0deg;
  --sn-depth-layer-3-scale: 1;

  // Define a common transition for depth layers.
  --sn-depth-layer-transition: opacity 700ms ease-out, transform 700ms ease-out,
    filter 700ms ease-out;
}

.Root__main-view .main-view-container__scroll-node {
  // Ensure perspective is set for 3D effects:
  perspective: 1000px;
  // Ensure overflow: hidden if necessary to contain blur from pseudo-elements.
  overflow: hidden;

  // Style pseudo-elements for the first two depth layers:
  &::before {
    // Furthest depth layer (Layer 0)
    content: "";
    position: absolute;
    inset: 0;
    pointer-events: none;
    z-index: -2; // Ensure it's behind ::after and main content
    background: radial-gradient(
      // Example gradient, can be simpler or use theme colors
      circle at center,
      rgba(
          var(--sn-header-primary-rgb, var(--spice-rgb-accent)),
          var(--sn-depth-layer-0-opacity, 0.05)
        )
        0%,
      rgba(
          var(--sn-header-secondary-rgb, var(--spice-rgb-surface0)),
          calc(var(--sn-depth-layer-0-opacity, 0.05) * 0.7)
        )
        70%,
      transparent 100%
    );
    transform: translateZ(calc(var(--sn-depth-layer-0-z, 75px) * -1))
      // Move back in Z
      translateY(var(--sn-depth-layer-0-offset-y, 0px))
      scale(var(--sn-depth-layer-0-scale, 1));
    filter: blur(var(--sn-depth-layer-0-blur, 2px))
      hue-rotate(var(--sn-depth-layer-0-hue-rotate, 0deg));
    // Opacity is already part of the background rgba, but can be an overall multiplier if needed here.
    // opacity: var(--sn-depth-layer-0-opacity, 0.05); // Can be redundant if background uses it
    transition: var(--sn-depth-layer-transition);
  }

  &::after {
    // Closer depth layer (Layer 1)
    content: "";
    position: absolute;
    inset: 0;
    pointer-events: none;
    z-index: -1; // Behind main content, but in front of ::before
    background: radial-gradient(
      ellipse at center,
      rgba(var(--sn-oklab-processed-bright-highlight-rgb), 0.015) 0%,
      transparent 50%
    );
    transform: translateZ(calc(var(--sn-depth-layer-1-z, 150px) * -1))
      translateY(var(--sn-depth-layer-1-offset-y, 0px))
      scale(var(--sn-depth-layer-1-scale, 1));
    filter: blur(var(--sn-depth-layer-1-blur, 4px))
      hue-rotate(var(--sn-depth-layer-1-hue-rotate, 0deg));
    // opacity: var(--sn-depth-layer-1-opacity, 0.05);
    transition: var(--sn-depth-layer-transition);
  }

  // If more than 2 layers are desired without JS-created elements,
  // they would need to be applied to different nested elements within .main-view-container__scroll-node
  // (e.g., .main-view-container__padding or specific section wrappers).
  // For now, the JS `DepthLayerSystem` will define variables for more layers,
  // but only the first two are directly styled via ::before/::after here.
}

// Phase 4 & StarryNight Effects Z-Index Corrections

.sn-stars-container {
  z-index: 1 !important; // Ensure it's above main backgrounds but below particles and UI
}

.shootingstar {
  z-index: 2 !important; // Above stars, below particles and UI
  position: fixed; // Ensure positioning context for z-index if not already set globally
}

// Particle canvas (#sn-particle-canvas) is set to z-index: 3 via JavaScript.
// Ensure main content containers are appropriately z-indexed if they need to be above particles,
// or below the main background effects.
// For example, if .Root__main-view .main-view-container__scroll-node itself should be at the very bottom:
// .Root__main-view .main-view-container__scroll-node {
//   z-index: 0; // Or an appropriate base level like -3 if pseudo-elements are -2 and -1
// }

// Phase 5: Behavioral Prediction Engine SCSS

// Base class for any predicted element (can be used for targeting if needed)
.sn-predicted-active {
  // Base styles for elements that have an active prediction
  // Example: slightly increase transition speed for responsiveness
  transition-duration: 150ms !important;
}

// Shared variable for highlight color, can be overridden per type or element
:root {
  --sn-predict-glow-color: rgba(
    var(--sn-gradient-accent-rgb, var(--spice-rgb-accent)),
    0.7
  );
  --sn-predict-pulse-color: rgba(
    var(--sn-gradient-primary-rgb, var(--spice-rgb-button)),
    0.8
  );
  // --sn-prediction-confidence: 0; // This is set per element by JS, no need for global default here if JS always sets it.
}

// Static Glow: A persistent, soft glow
.sn-predict-static-glow {
  box-shadow: 0 0 calc(10px + 15px * var(--sn-prediction-confidence, 0))
    calc(2px + 3px * var(--sn-prediction-confidence, 0))
    var(--sn-predict-glow-color);
  border-radius: inherit; // Ensure glow follows element's border-radius
  transition: box-shadow 300ms ease-out;
}

// Subtle Glow: A very faint, almost ambient highlight
.sn-predict-subtle-glow {
  &::before {
    content: "";
    position: absolute;
    inset: -3px; // Control spread of the glow
    background: radial-gradient(
      ellipse at center,
      rgba(
          var(--sn-gradient-accent-rgb, var(--spice-rgb-accent)),
          calc(0.1 + 0.2 * var(--sn-prediction-confidence, 0))
            // Opacity from 0.1 to 0.3 based on confidence
        )
        0%,
      transparent 70%
    );
    border-radius: inherit;
    opacity: var(
      --sn-prediction-confidence,
      0.5
    ); // Overall opacity also tied to confidence, can be adjusted
    pointer-events: none;
    z-index: -1; // Ensure it's behind the element's content
    transition: opacity 300ms ease-out, background 300ms ease-out;
  }
}

@keyframes sn-pulse-animation {
  0% {
    transform: scale(1);
    opacity: calc(0.5 + 0.5 * var(--sn-prediction-confidence, 0));
  }
  50% {
    transform: scale(
      calc(1 + 0.03 * var(--sn-prediction-confidence, 0))
    ); // Max 3% scale based on confidence
    opacity: calc(
      0.8 + 0.2 * var(--sn-prediction-confidence, 0)
    ); // Max 100% opacity
  }
  100% {
    transform: scale(1);
    opacity: calc(0.5 + 0.5 * var(--sn-prediction-confidence, 0));
  }
}

// Generic Pulse: For effects like 'glow-pulse' or 'subtle-pulse' that need an animation
.sn-predict-pulse,
.sn-predict-subtle-pulse {
  animation: sn-pulse-animation
    calc(2000ms - (1000ms * var(--sn-prediction-confidence, 0))) ease-in-out
    // Speed from 2s to 1s
    infinite;
}

// Glow Pulse: Combines static glow with pulsing animation
.sn-predict-glow.sn-predict-pulse {
  // Applied when both classes are present
  position: relative; // Needed for ::after pseudo-element if used for glow

  &::after {
    // Pulsing glow effect
    content: "";
    position: absolute;
    inset: -2px; // Slightly larger than the element
    border-radius: inherit;
    box-shadow: 0 0 calc(8px + 12px * var(--sn-prediction-confidence, 0))
      var(--sn-predict-pulse-color);
    opacity: 0; // Animation will handle opacity
    animation: sn-glow-pulse-fade
      calc(2000ms - (1000ms * var(--sn-prediction-confidence, 0))) ease-in-out
      infinite;
    pointer-events: none;
    z-index: -1;
  }
}

@keyframes sn-glow-pulse-fade {
  0% {
    opacity: calc(
      0.3 * var(--sn-prediction-confidence, 0)
    ); // From 0% to 30% opacity based on confidence
  }
  50% {
    opacity: calc(
      0.7 * var(--sn-prediction-confidence, 0)
    ); // From 0% to 70% opacity
  }
  100% {
    opacity: calc(0.3 * var(--sn-prediction-confidence, 0));
  }
}

// Subtle Pulse: A less intrusive pulsing effect, maybe just a slight scale or opacity change
.sn-predict-subtle-pulse {
  // The main pulse animation (sn-pulse-animation) is already applied by the .sn-predict-pulse class.
  // This specific class can be used if subtle-pulse needs *different* base properties than glow-pulse before animation.
  // For example, if it should not have an ::after pseudo-element for a glow.
  // If its behavior is identical to .sn-predict-pulse for the base element itself, then it mainly serves
  // as a semantic marker for the JS to apply the correct combined classes like ".sn-predict .sn-predict-subtle-pulse".
}

// ████████████████████████████████████████████████████████████████████████████████
// DIMENSIONAL NEXUS SIDEBAR - Phase 1: Quantum Foundation & Biomorphic Architecture
// ████████████████████████████████████████████████████████████████████████████████
:root {
  // Base RGB values (can be linked to Catppuccin palette or theme accents later)
  --sn-consciousness-deep-rgb: var(
    --spice-rgb-base,
    "30,30,46"
  ); // Example: Mocha Base
  --sn-neural-primary-rgb: var(
    --spice-rgb-blue,
    "137,180,250"
  ); // Example: Mocha Blue
  --sn-neural-secondary-rgb: var(
    --spice-rgb-mauve,
    "203,166,247"
  ); // Example: Mocha Mauve
  --sn-neural-tertiary-rgb: var(
    --spice-rgb-teal,
    "148,226,213"
  ); // Example: Mocha Teal
  --sn-temporal-past-rgb: var(--spice-rgb-surface0, "49,50,68");
  --sn-temporal-present-rgb: var(--spice-rgb-surface1, "69,71,90");
  --sn-temporal-future-rgb: var(--spice-rgb-surface2, "88,91,112");

  // Dynamic control variables (to be manipulated by JS)
  --sn-consciousness-opacity: 0.15;
  --sn-neural-flow-speed: 20s; // Duration for one cycle of neural flow
  --sn-neural-opacity: 0.1;
  --sn-quantum-foam-opacity: 0.03;
  --sn-temporal-shift-progress: 0; // 0 to 1, for temporal layer blend
  --sn-temporal-animation-speed: 30s;
}

// ████████████████████████████████████████████████████████████████████████████████
// DIMENSIONAL NEXUS SIDEBAR - Phase 3: Quantum Entanglement of Navigation Elements
// ████████████████████████████████████████████████████████████████████████████████

:root {
  // Variables for Nav Item Entanglement (Phase 3)
  --sn-nav-item-base-opacity: 0.85;
  --sn-nav-item-hover-bg-opacity: 0.1;
  --sn-nav-item-active-bg-opacity: 0.15;

  // Default RGB for glow - can be overridden by JS from theme accents
  --sn-nav-item-glow-color-rgb: var(--sn-gradient-primary-rgb, "202,158,230");
  --sn-nav-item-glow-intensity: 0; // 0 to 1, controlled by JS

  // Default RGB for text energy - can be overridden by JS
  --sn-nav-text-energy-color-rgb: var(--sn-gradient-accent-rgb, "140,170,238");
  --sn-nav-text-energy-opacity: 0; // 0 to 0.5, controlled by JS

  --sn-nav-item-transform-scale: 1; // 1 to 1.03, controlled by JS
  --sn-nav-item-transition-duration: 0.3s;
}

// General styling for navigation links within the main sidebar navigation area
// Targets links in "Home", "Search", "Your Library" headers, and potentially footer links.
// More specific targeting for library items follows.
div[data-testid="Desktop_LeftSidebar_Id"].Root__nav-bar {
  nav[aria-label="Main"] a,
  .main-yourLibraryX-header a, // Links in library header
  div[data-testid="left-sidebar-footer"] a, // Links in sidebar footer
  a.link-subtle.main-navBar-navBarLink {
    // Common class for Home, Search etc.
    position: relative;
    display: flex; // Use flex for better alignment of icons and text
    align-items: center;
    padding: 8px 24px; // Standard Spicetify padding
    margin: 2px 0;
    border-radius: 6px;
    opacity: var(--sn-nav-item-base-opacity);
    transform: scale(var(--sn-nav-item-transform-scale));
    transition: opacity var(--sn-nav-item-transition-duration) ease,
      background-color var(--sn-nav-item-transition-duration) ease,
      transform var(--sn-nav-item-transition-duration)
        cubic-bezier(0.25, 0.46, 0.45, 0.94),
      box-shadow var(--sn-nav-item-transition-duration) ease;
    text-decoration: none;
    color: var(--spice-subtext, #b3b3b3); // Default text color

    // Text as Quantum Foam (subtle)
    .Type__TypeElement-sc-goliZz-0 {
      // Target the span that usually holds the text
      // This selector might need to be more generic e.g. span, or specific to text containers
      text-shadow: 0 0 3px
          rgba(
            var(--sn-nav-text-energy-color-rgb),
            calc(var(--sn-nav-text-energy-opacity) * 0.5)
          ),
        0 0 8px
          rgba(
            var(--sn-nav-text-energy-color-rgb),
            calc(var(--sn-nav-text-energy-opacity) * 0.3)
          );
      transition: text-shadow var(--sn-nav-item-transition-duration) ease;
      color: inherit; // Ensure text color is properly inherited or set
    }

    svg {
      fill: currentColor; // Ensure icons match text color
      transition: fill var(--sn-nav-item-transition-duration) ease;
      margin-right: 16px; // Space between icon and text
    }

    &:hover {
      opacity: 1;
      color: var(--spice-text, #ffffff);
      background-color: rgba(
        var(--sn-nav-item-glow-color-rgb),
        var(--sn-nav-item-hover-bg-opacity)
      );
      // Neural Glow Propagation (subtle glow on hover)
      box-shadow: 0 0 calc(8px + 12px * var(--sn-nav-item-glow-intensity))
        calc(1px + 2px * var(--sn-nav-item-glow-intensity))
        rgba(
          var(--sn-nav-item-glow-color-rgb),
          calc(0.3 + 0.4 * var(--sn-nav-item-glow-intensity))
        );

      .Type__TypeElement-sc-goliZz-0 {
        text-shadow: 0 0 5px
            rgba(
              var(--sn-nav-text-energy-color-rgb),
              var(--sn-nav-text-energy-opacity)
            ),
          0 0 12px
            rgba(
              var(--sn-nav-text-energy-color-rgb),
              calc(var(--sn-nav-text-energy-opacity) * 0.6)
            );
      }
    }

    // Active state for main nav links (e.g., Home, Search when on that page)
    &.main-navBar-navBarLinkActive,
    &[aria-current="page"] {
      opacity: 1;
      color: var(--spice-text, #ffffff);
      background-color: rgba(
        var(--sn-nav-item-glow-color-rgb),
        var(--sn-nav-item-active-bg-opacity)
      );
      box-shadow: 0 0 calc(10px + 15px * var(--sn-nav-item-glow-intensity))
        calc(2px + 3px * var(--sn-nav-item-glow-intensity))
        rgba(
          var(--sn-nav-item-glow-color-rgb),
          calc(0.5 + 0.3 * var(--sn-nav-item-glow-intensity))
        );

      .Type__TypeElement-sc-goliZz-0 {
        font-weight: bold; // Make active link text bold
        text-shadow: 0 0 6px
            rgba(
              var(--sn-nav-text-energy-color-rgb),
              calc(var(--sn-nav-text-energy-opacity) * 1.2)
            ),
          0 0 15px
            rgba(
              var(--sn-nav-text-energy-color-rgb),
              calc(var(--sn-nav-text-energy-opacity) * 0.8)
            );
      }
      svg {
        // Potentially slightly larger or brighter icon for active state
      }
    }
  }
}

// END DIMENSIONAL NEXUS SIDEBAR - Phase 3

// ████████████████████████████████████████████████████████████████████████████████
// DIMENSIONAL NEXUS SIDEBAR - Phase 4: Modal & Popup Symbiosis
// ████████████████████████████████████████████████████████████████████████████████

:root {
  // Variables for Modal/Popup Symbiosis (Phase 4)
  --sn-modal-bg-opacity: var(
    --sn-consciousness-opacity,
    0.15
  ); // Inherits from sidebar bg opacity by default
  --sn-modal-blur-intensity: 10px; // Softer blur for modals
  --sn-modal-border-color-rgb: var(--sn-gradient-secondary-rgb, "186,187,241");
  --sn-modal-border-opacity: 0.3;

  --sn-modal-glow-intensity: calc(
    var(--sn-nav-item-glow-intensity, 0.3) * 0.8
  ); // Slightly dimmer than nav items
  --sn-modal-text-energy-opacity: calc(
    var(--sn-nav-text-energy-opacity, 0.2) * 0.7
  );

  // RGB for modal glow/text, can be dynamically updated by JS to be distinct or harmonious
  --sn-modal-glow-color-rgb: var(--sn-nav-item-glow-color-rgb, "202,158,230");
  --sn-modal-text-energy-color-rgb: var(
    --sn-nav-text-energy-color-rgb,
    "140,170,238"
  );

  --sn-modal-emergence-duration: 0.5s;
  --sn-modal-emergence-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

// Organic Emergence Animation
@keyframes sn-organic-emergence {
  0% {
    opacity: 0;
    transform: scale(0.85) translateY(20px);
    clip-path: ellipse(
      50% 20% at 50% 100%
    ); // Start as a flat ellipse at the bottom
  }
  60% {
    opacity: 0.9;
    transform: scale(1.02) translateY(-5px);
    clip-path: ellipse(150% 100% at 50% 50%); // Expand to a larger ellipse
  }
  100% {
    opacity: 1;
    transform: scale(1) translateY(0);
    clip-path: inset(
      0% 0% 0% 0% round var(--border-radius)
    ); // Settle to its final shape (using existing theme roundness)
  }
}

// General Modal & Popup Styling
.GenericModal__overlay,
.encore-context-menu-container, // Covers the backdrop for context menus
body > div[role="dialog"] > div:first-child, // Common pattern for modal backdrops
body > div[data-encore-id="popover"] > div:first-child {
  // Popover backdrops
  background-color: rgba(
    var(--spice-rgb-base, "30,30,46"),
    0.3
  ) !important; // Slightly dimmed theme base for backdrop
  backdrop-filter: blur(
    calc(var(--sn-modal-blur-intensity) * 0.5)
  ); // Less blur on overlay
}

.GenericModal__content,
.encore-context-menu,
.encore-dropdown-menu, // Another common class for dropdowns
.encore-popover__content,
div[role="dialog"] {
  // Critical: Ensure these elements are not entirely opaque by default from Spicetify's CSS
  background: transparent !important; // Make the main modal/menu container transparent
  color: var(--spice-text) !important; // Ensure text is readable
  border: 1px solid
    rgba(var(--sn-modal-border-color-rgb), var(--sn-modal-border-opacity));
  border-radius: var(--border-radius); // Use existing theme border-radius
  box-shadow: 0 8px 32px 0
    rgba(var(--sn-oklab-processed-dynamic-shadow-rgb), 0.37); // Soft shadow
  overflow: hidden; // Important for pseudo-elements and clip-paths
  position: relative; // For pseudo-elements
  transform-origin: center center;

  // Shared Consciousness Layer (as background)
  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -1; // Behind the content
    border-radius: inherit; // Match parent's border-radius

    // Use sidebar's background layers, but dimmed and potentially simpler
    background-image:
      // 1. Dimmed Consciousness Layer (Primary Gradient)
      radial-gradient(
        ellipse at 70% 30%,
        hsla(
          from
            oklch(
              var(--sn-oklab-primary-l, 0.6)
                var(--sn-oklab-primary-chroma, 0.15)
                var(--sn-oklab-primary-hue, 280)
            )
            calc(l - 0.05) calc(c * 0.8) h /
            calc(var(--sn-modal-bg-opacity) * 0.7)
        ),
        transparent 60%
      ),
      // 2. Dimmed Neural Flow (Secondary Gradient)
      radial-gradient(
          ellipse at 30% 70%,
          hsla(
            from
              oklch(
                var(--sn-oklab-secondary-l, 0.6)
                  var(--sn-oklab-secondary-chroma, 0.1)
                  var(--sn-oklab-secondary-hue, 260)
              )
              calc(l - 0.08) calc(c * 0.7) h /
              calc(var(--sn-modal-bg-opacity) * 0.6)
          ),
          transparent 55%
        );
    opacity: var(--sn-modal-bg-opacity); // Control overall layer opacity
    filter: blur(var(--sn-modal-blur-intensity))
      saturate(var(--sn-gradient-saturation))
      brightness(var(--sn-gradient-brightness))
      contrast(var(--sn-gradient-contrast));
    background-blend-mode: screen;
    transition: opacity var(--sn-gradient-transition),
      filter var(--sn-gradient-transition); // Match sidebar transition
  }

  // Trigger for Organic Emergence
  &.sn-dimensional-modal-emerging {
    animation: sn-organic-emergence var(--sn-modal-emergence-duration)
      var(--sn-modal-emergence-timing-function) forwards;
  }

  // Styling for interactive elements within modals/menus
  button,
  input,
  textarea,
  .main-button-primary, // Spicetify primary button
  .main-button-secondary,
  li[role="menuitem"],
  .encore-dropdown-menu-item,
  .encore-context-menu-item {
    &:not(.main-trackList-rowSectionVariable):not(
        .main-trackList-rowSectionStart
      ):not(.main-trackList-rowSectionIndex) {
      // Avoid overly broad application
      // Ensure buttons inside modals have a minimum style if not already themed
      background-color: rgba(
        var(--spice-rgb-button, var(--sn-modal-glow-color-rgb)),
        0.1
      ) !important; // Very subtle bg
      color: var(--spice-text) !important;
      border: 1px solid transparent;
      transition: background-color 0.2s ease, border-color 0.2s ease,
        transform 0.2s ease, box-shadow 0.3s ease;

      // Text as Quantum Foam (Subtle)
      position: relative; // For pseudo-element
      &::after {
        // Text energy effect
        content: attr(aria-label) / "" attr(data-label) / "" counter(content) /
          "" ""; // Use accessible attributes or counter for content
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: inherit; // Align with button's text alignment
        color: rgba(
          var(--sn-modal-text-energy-color-rgb),
          var(--sn-modal-text-energy-opacity)
        );
        filter: blur(0.5px) opacity(var(--sn-nav-item-base-opacity)); // Use base opacity from nav
        transform: scale(1.01); // Slightly offset
        pointer-events: none;
        transition: color 0.3s ease, opacity 0.3s ease;
        text-shadow: 0 0 calc(1px + 2px * var(--sn-modal-text-energy-opacity))
            rgba(var(--sn-modal-text-energy-color-rgb), 0.3),
          0 0 calc(3px + 5px * var(--sn-modal-text-energy-opacity))
            rgba(var(--sn-modal-text-energy-color-rgb), 0.2);
        font-size: inherit;
        font-weight: inherit;
        font-family: inherit;
        letter-spacing: inherit;
      }

      &:hover,
        &[aria-expanded="true"],
        &.active, // Common active class
        &:focus-visible {
        background-color: rgba(
          var(--spice-rgb-button, var(--sn-modal-glow-color-rgb)),
          0.2
        ) !important;
        border-color: rgba(var(--sn-modal-glow-color-rgb), 0.5) !important;
        transform: translateY(-1px) scale(1.01);

        // Neural Glow Propagation
        box-shadow: 0 0 calc(3px + 5px * var(--sn-modal-glow-intensity))
            rgba(var(--sn-modal-glow-color-rgb), 0.2),
          0 0 calc(6px + 10px * var(--sn-modal-glow-intensity))
            rgba(var(--sn-modal-glow-color-rgb), 0.15),
          inset 0 0 2px rgba(var(--sn-modal-glow-color-rgb), 0.1);

        &::after {
          // Enhance text energy on hover/focus
          opacity: calc(
            var(--sn-nav-item-base-opacity) * 1.2
          ); // Slightly brighter
          color: rgba(
            var(--sn-modal-text-energy-color-rgb),
            calc(var(--sn-modal-text-energy-opacity) * 1.5)
          );
        }
      }

      &[aria-checked="true"],
      &[data-active="true"] {
        // Active state for toggles/menu items
        background-color: rgba(
          var(--spice-rgb-button, var(--sn-modal-glow-color-rgb)),
          0.25
        ) !important;
        border-color: rgba(var(--sn-modal-glow-color-rgb), 0.6) !important;
        box-shadow: 0 0 calc(4px + 6px * var(--sn-modal-glow-intensity))
            rgba(var(--sn-modal-glow-color-rgb), 0.25),
          inset 0 0 3px rgba(var(--sn-modal-glow-color-rgb), 0.15);
      }
    }
  }
}

// Ensure context menu items have a minimum height and padding for touch targets and visual balance
.encore-context-menu-item,
.encore-dropdown-menu-item {
  min-height: 36px;
  padding: 8px 12px !important; // Override Spicetify defaults if too small
}

// Fix for some modals that might have forced white/black backgrounds via inline styles or very specific selectors
body > .ReactModalPortal div[role="dialog"] {
  background-color: transparent !important;
  // Add any other specific overrides for known problematic modal types
}

// Further refinement for items within the Spicetify settings modal specifically
.main-settingsPage-section .main-dropDown-dropDown, // Spicetify settings dropdowns
.main-settingsPage-section button:not(.main-buttons-primaryButton):not(.main-buttons-secondaryButton) {
  // Generic buttons in settings
  // Slightly different treatment to blend with settings UI
  &:hover {
    background-color: rgba(
      var(--spice-rgb-surface1, var(--sn-modal-glow-color-rgb)),
      0.3
    ) !important;
  }
}

// END DIMENSIONAL NEXUS SIDEBAR - Phase 4

// ████████████████████████████████████████████████████████████████████████████████
// DIMENSIONAL NEXUS SIDEBAR - Phase 5: Holographic Data Glyphs & Biometric Feedback
// ████████████████████████████████████████████████████████████████████████████████

:root {
  // Variables for Data Glyphs (Phase 5)
  --sn-glyph-base-size: 6px; // Base size of a glyph element
  --sn-glyph-opacity: 0;
  --sn-glyph-scale: 1;
  --sn-glyph-pulse-intensity: 0; // 0 to 1, for pulsing animation
  --sn-glyph-shimmer-opacity: 0; // For color shimmer effect
  --sn-glyph-rotation: 0deg;
  --sn-glyph-color-rgb: var(
    --sn-gradient-accent-rgb,
    "140,170,238"
  ); // Default color

  // Variables for Biometric Feedback States (Phase 5)
  --sn-sidebar-meditation-desaturation: 0; // 0 to 1 (0 = normal, 1 = fully desaturated gray)
  --sn-sidebar-meditation-slowdown: 1; // Animation speed multiplier (1 = normal, <1 = slower)
  --sn-item-energy-absorption-scale: 1; // Scale effect for item absorbing energy
}

// Base Data Glyph Styling
.sn-data-glyph {
  position: absolute;
  // Example positioning: top-right of parent. JS will need to handle parent context.
  top: 4px;
  right: 4px;
  width: var(--sn-glyph-base-size);
  height: var(--sn-glyph-base-size);
  background-color: rgba(
    var(--sn-glyph-color-rgb),
    var(--sn-glyph-shimmer-opacity, 0.5)
  ); // Base with shimmer
  border-radius: 50%;
  opacity: var(--sn-glyph-opacity);
  transform: scale(var(--sn-glyph-scale)) rotate(var(--sn-glyph-rotation));
  transition: opacity 0.4s ease, transform 0.4s ease, background-color 0.4s ease;
  pointer-events: none; // Glyphs shouldn't interfere with interaction
  z-index: 5; // Ensure it's above the item's text/icon but below popups

  &::before,
  &::after {
    // For more complex glyphs (e.g., core + orbiting elements)
    content: "";
    position: absolute;
    border-radius: 50%;
  }

  // Example: Pulsing Core for the glyph
  &::before {
    width: 100%;
    height: 100%;
    background-color: rgba(var(--sn-glyph-color-rgb), 0.8);
    animation: sn-glyph-pulse 2s infinite ease-in-out;
    animation-play-state: var(
      --sn-glyph-pulse-animation-state,
      paused
    ); // Controlled by JS
    transform: scale(
      calc(0.6 + 0.4 * var(--sn-glyph-pulse-intensity))
    ); // Pulse size based on intensity
    opacity: calc(0.5 + 0.5 * var(--sn-glyph-pulse-intensity));
    transition: transform 0.3s ease, opacity 0.3s ease;
  }
}

@keyframes sn-glyph-pulse {
  0%,
  100% {
    transform: scale(calc(0.6 + 0.4 * var(--sn-glyph-pulse-intensity)));
    opacity: calc(0.5 + 0.5 * var(--sn-glyph-pulse-intensity));
  }
  50% {
    transform: scale(calc(0.8 + 0.2 * var(--sn-glyph-pulse-intensity)));
    opacity: calc(0.7 + 0.3 * var(--sn-glyph-pulse-intensity));
  }
}

// Sidebar Digital Meditation State
div[data-testid="Desktop_LeftSidebar_Id"].Root__nav-bar {
  // Apply desaturation and slowdown when --sn-sidebar-meditation-desaturation > 0
  // This requires careful application to not break other filter effects.
  // We might need to adjust how filters are composed in the ::before/::after layers.
  // For now, a simple approach targeting the main layers' filter property:
  &.sn-digital-meditation {
    // This class will be added by JS
    .sn-consciousness-layer, // Target the pseudo-elements if they have distinct classes
    .sn-neural-flow-layer,
    .sn-quantum-foam-layer,
    &::before, // If layers are directly on ::before
    &::after {
      // and ::after
      filter: blur(var(--sn-sidebar-blur-intensity, 25px))
        saturate(
          calc(
            var(--sn-gradient-saturation) *
              (1 - var(--sn-sidebar-meditation-desaturation))
          )
        )
        brightness(var(--sn-gradient-brightness))
        contrast(var(--sn-gradient-contrast));
      animation-duration: calc(
        var(--original-animation-duration, 20s) /
          var(--sn-sidebar-meditation-slowdown)
      );
      // Need to ensure other animation properties also respect this slowdown if not using a single duration property.
    }
    // Reduce animation speed for specific animations
    // This is tricky without a global animation speed control on the parent.
    // Individual animation-duration properties would need to be targeted or vars used.
    // For example, if --sn-neural-flow-speed is used by an animation:
    // --sn-neural-flow-speed: calc(var(--original-neural-flow-speed, 20s) / var(--sn-sidebar-meditation-slowdown));
  }
}

// Item Energy Absorption Feedback (applied to nav items by JS)
.main-yourLibraryX-navLink,
.main-yourLibraryX-listItem,
nav[aria-label="Main"] ul li a {
  &.sn-absorbing-energy {
    transition: transform 0.1s cubic-bezier(0.1, 0.7, 0.5, 1.3); // Quick, bouncy feel
    transform: scale(var(--sn-item-energy-absorption-scale));
    // Potentially add a subtle glow change too
    box-shadow: 0 0 calc(5px + 8px * var(--sn-nav-item-glow-intensity))
        rgba(
          var(--sn-nav-item-glow-color-rgb),
          calc(var(--sn-nav-item-glow-intensity) * 0.3)
        ),
      inset 0 0 3px
        rgba(
          var(--sn-nav-item-glow-color-rgb),
          calc(var(--sn-nav-item-glow-intensity) * 0.15)
        );
  }
}

// END DIMENSIONAL NEXUS SIDEBAR - Phase 5

// =============================================================================
// Catppuccin StarryNight - Phase 6 SCSS Additions
// =============================================================================

:root {
  // --- Phase 6: Predictive Materialization System ---
  --sn-predictive-echo-opacity: 0;
  --sn-predictive-echo-scale: 1;
  --sn-dimensional-rift-intensity: 0;
  --sn-dimensional-rift-color-rgb: 140, 170, 238; // Default: blue

  // --- Phase 6: Dimensional Nexus - Atmospheric & Entanglement ---
  --sn-sidebar-atmosphere-hue-shift: 0deg;
  --sn-sidebar-atmosphere-saturation-factor: 1;
  --sn-sidebar-atmosphere-vibration-intensity: 0; // 0 to 1
  --sn-sidebar-entanglement-intensity: 0; // 0 to 0.1
  --sn-sidebar-entanglement-color-rgb: var(
    --spice-rgb-main,
    48,
    52,
    70
  ); // Default: main bg

  // --- Phase 6: DataGlyphSystem - Temporal Echoes & Resonance ---
  // Item-specific, but defaults can be useful for base styling or if not overridden
  --sn-nav-item-echo-opacity: 0;
  --sn-nav-item-echo-scale: 1;
  --sn-glyph-resonance-intensity: 0; // 0 to 0.2 for glyph enhancement
}

// =============================================================================
// PHASE 6: STYLING IMPLEMENTATIONS
// =============================================================================

// 1. Predictive Materialization System Effects
// ============================================

// Styles for a generic predictive echo item (applied by JS)
.sn-predictive-echo-item {
  opacity: var(--sn-predictive-echo-opacity, 0);
  transform: scale(var(--sn-predictive-echo-scale, 1));
  transition: opacity 0.5s ease-out, transform 0.5s ease-out;
  // Add a subtle shimmer or pulse if desired
  animation: sn-echo-shimmer 3s infinite ease-in-out alternate;
}

@keyframes sn-echo-shimmer {
  0% {
    filter: brightness(100%) saturate(100%);
  }
  50% {
    filter: brightness(120%) saturate(110%);
  }
  100% {
    filter: brightness(100%) saturate(100%);
  }
}

// Styles for a dimensional rift effect (conceptual, likely a pseudo-element on a target)
.sn-dimensional-rift-target {
  // Example target class JS might add this to
  position: relative;
  overflow: visible; // Allow pseudo-element to extend

  &::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: 150px;
    height: 150px;
    border-radius: 50%;
    background: radial-gradient(
      circle at center,
      rgba(
          var(--sn-dimensional-rift-color-rgb, 140, 170, 238),
          calc(var(--sn-dimensional-rift-intensity, 0) * 0.3)
        )
        0%,
      rgba(
          var(--sn-dimensional-rift-color-rgb, 140, 170, 238),
          calc(var(--sn-dimensional-rift-intensity, 0) * 0.1)
        )
        40%,
      transparent 70%
    );
    transform: translate(-50%, -50%)
      scale(calc(0.5 + var(--sn-dimensional-rift-intensity, 0) * 0.5));
    opacity: var(--sn-dimensional-rift-intensity, 0);
    filter: blur(
      calc(10px * (1 - var(--sn-dimensional-rift-intensity, 0)) + 5px)
    );
    animation: sn-rift-pulse 4s infinite ease-in-out;
    transition: opacity 0.6s ease-out, transform 0.6s ease-out,
      background 0.6s ease-out;
    pointer-events: none;
    z-index: -1; // Behind content usually
  }
}

@keyframes sn-rift-pulse {
  0%,
  100% {
    transform: translate(-50%, -50%)
      scale(calc(0.5 + var(--sn-dimensional-rift-intensity, 0) * 0.5));
  }
  50% {
    transform: translate(-50%, -50%)
      scale(calc(0.5 + var(--sn-dimensional-rift-intensity, 0) * 0.6));
  }
}

// 2. Dimensional Nexus - Atmospheric & Entanglement Enhancements
// ===============================================================

.Root__nav-bar {
  // Or whichever element holds the main sidebar background layers
  // Apply atmospheric hue shift and saturation to the whole sidebar or specific layers
  // This example applies it to the main sidebar container. Be careful with specificity.
  filter: hue-rotate(var(--sn-sidebar-atmosphere-hue-shift, 0deg))
    saturate(var(--sn-sidebar-atmosphere-saturation-factor, 1));
  transition: filter 1.5s ease-in-out; // Smooth transition for atmospheric changes

  // Entanglement: Add a pseudo-element for the color bleed effect
  &::after {
    // Or another pseudo-element if ::after is already in use
    content: "";
    position: absolute;
    inset: 0;
    background-color: rgba(
      var(--sn-sidebar-entanglement-color-rgb, 48, 52, 70),
      var(--sn-sidebar-entanglement-intensity, 0)
    );
    mix-blend-mode: color-dodge; // Or other blend modes like soft-light, overlay
    pointer-events: none;
    z-index: 0; // Ensure it's above base background but below content if needed
    transition: background-color 1.2s ease-in-out;
    opacity: var(
      --sn-sidebar-entanglement-intensity,
      0
    ); // Control via intensity var
  }

  // Vibration Effect (applied to a background layer, e.g., ::before or a dedicated div)
  // Assuming .sn-sidebar-vibration-layer is a child or pseudo of .Root__nav-bar
  .sn-sidebar-vibration-layer,
  &::before {
    // Example targets
    // If var is 0, no animation. If > 0, animation runs.
    // JS could add/remove a class to control animation play state too.
    animation-name: sn-sidebar-vibrate;
    animation-duration: 0.3s;
    animation-iteration-count: infinite;
    animation-timing-function: linear;
    animation-play-state: var(--_sidebar-vibration-play-state, paused);
    // Helper variable to control play state based on intensity
    --_sidebar-vibration-play-state: if(
      var(--sn-sidebar-atmosphere-vibration-intensity, 0) > 0.01,
      running,
      paused
    );
  }
}

@keyframes sn-sidebar-vibrate {
  0% {
    transform: translate(
      calc(var(--sn-sidebar-atmosphere-vibration-intensity, 0) * 0.2px),
      calc(var(--sn-sidebar-atmosphere-vibration-intensity, 0) * 0.2px)
    );
  }
  25% {
    transform: translate(
      calc(var(--sn-sidebar-atmosphere-vibration-intensity, 0) * -0.2px),
      calc(var(--sn-sidebar-atmosphere-vibration-intensity, 0) * 0.3px)
    );
  }
  50% {
    transform: translate(
      calc(var(--sn-sidebar-atmosphere-vibration-intensity, 0) * 0.3px),
      calc(var(--sn-sidebar-atmosphere-vibration-intensity, 0) * -0.2px)
    );
  }
  75% {
    transform: translate(
      calc(var(--sn-sidebar-atmosphere-vibration-intensity, 0) * -0.1px),
      calc(var(--sn-sidebar-atmosphere-vibration-intensity, 0) * -0.3px)
    );
  }
  100% {
    transform: translate(
      calc(var(--sn-sidebar-atmosphere-vibration-intensity, 0) * 0.2px),
      calc(var(--sn-sidebar-atmosphere-vibration-intensity, 0) * 0.2px)
    );
  }
}

// 3. DataGlyphSystem - Temporal Echoes & Resonance
// =================================================

.sn-data-glyph {
  position: relative; // For pseudo-element positioning if used for echo
  // Base styles... (opacity, size, color already handled by JS on the element or its CSS vars)

  // Resonance: Enhance existing properties or add new ones
  // Example: Adding a subtle glow based on resonance intensity
  // The base glyph color and opacity are set via --sn-glyph-color-rgb and --sn-glyph-opacity
  // Resonance can add to this, e.g. making the base color slightly more intense or adding a distinct glow.
  box-shadow: 0 0 calc(2px + var(--sn-glyph-resonance-intensity, 0) * 15px)
    rgba(
      var(--sn-glyph-color-rgb, var(--spice-rgb-accent)),
      calc(0.1 + var(--sn-glyph-resonance-intensity, 0) * 0.5)
    );
  transition: box-shadow 0.4s ease-in-out; // Smooth resonance changes

  // Temporal Echo (achieved via JS setting --sn-nav-item-echo-opacity/scale on the glyph element)
  // Or using a pseudo-element if the glyph itself needs to remain unchanged during echo
  &.sn-nav-item-echoing {
    // The following assumes JS sets these vars directly on the .sn-data-glyph or its wrapper
    // when echo is active, and SCSS primarily defines the animation behavior.
    // An alternative is to use a ::after pseudo-element for the echo.
    animation: sn-temporal-echo-animation 0.75s ease-out forwards;
  }
}

@keyframes sn-temporal-echo-animation {
  0% {
    opacity: var(--sn-nav-item-echo-opacity, 0.3); // Start opacity (set by JS)
    transform: scale(
      var(--sn-nav-item-echo-scale, 1.15)
    ); // Start scale (set by JS)
    filter: brightness(1.2);
  }
  100% {
    opacity: 0;
    transform: scale(1.4);
    filter: brightness(1.5);
  }
}

// If using a pseudo-element for the echo instead of animating the glyph itself:
/*
.sn-data-glyph {
  &::after { // Echo element
    content: "";
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    background-color: rgba(var(--sn-glyph-color-rgb, var(--spice-rgb-accent)), var(--sn-nav-item-echo-opacity, 0));
    border-radius: inherit; // Or specific shape
    transform: scale(var(--sn-nav-item-echo-scale, 1));
    opacity: var(--sn-nav-item-echo-opacity, 0);
    pointer-events: none;
    z-index: -1;
  }

  &.sn-nav-item-echoing::after {
    animation: sn-temporal-echo-pseudo 0.75s ease-out forwards;
  }
}

@keyframes sn-temporal-echo-pseudo {
  0% {
    opacity: var(--sn-nav-item-echo-opacity, 0.3); // From JS
    transform: scale(var(--sn-nav-item-echo-scale, 1.15)); // From JS
  }
  100% {
    opacity: 0;
    transform: scale(1.5);
  }
}
*/

// Ensure other related styles from previous phases are compatible or adjusted if needed.
// For example, if .Root__nav-bar already has ::before/::after, choose new pseudo-elements
// or add dedicated child divs for new layers like entanglement or vibration.

// --- End of Phase 6 SCSS Additions ---

// =============================================================================
// PHASE 6.1: Sidebar Thematic Integration - Enhanced Background
// =============================================================================
.Root__nav-bar {
  position: relative; // Ensure positioning context for pseudo-elements
  z-index: 1; // Ensure sidebar itself is above main view pseudo-elements if overlapping fixed might occur

  &::before {
    content: "";
    position: absolute; // Covers the sidebar area
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -1; // Behind the sidebar's direct content and its own background

    // Gradient similar to .Root__main-view but adapted for sidebar context
    background: linear-gradient(
      180deg,
      // Top to bottom
      rgba(var(--sn-gradient-primary-rgb), 0.3) 0%,
      rgba(var(--sn-gradient-secondary-rgb), 0.15) 50%,
      rgba(var(--sn-gradient-accent-rgb), 0.25) 100%
    );

    opacity: var(--sn-dynamic-opacity); // Use theme's dynamic opacity

    // Integrate sidebar-specific atmospheric effects and standard gradient filters
    filter: blur(var(--sn-gradient-blur))
      saturate(
        calc(
          var(--sn-dynamic-saturation) *
            var(--sn-sidebar-atmosphere-saturation-factor, 1)
        )
      )
      brightness(
        calc(
          var(--sn-dynamic-brightness) *
            (1 + var(--sn-sidebar-atmosphere-vibration-intensity, 0) * 0.1)
        )
      )
      // Vibration slightly increases brightness
      contrast(var(--sn-gradient-contrast))
      hue-rotate(var(--sn-sidebar-atmosphere-hue-shift, 0deg));

    transition: opacity var(--sn-gradient-transition),
      filter var(--sn-gradient-transition);

    @include performance-optimized;
  }

  // Note: The existing direct background on .Root__nav-bar from _sn_glassmorphism.scss
  // is var(--enhanced-background) which is rgba(var(--spice-rgb-surface0), var(--color-enhancement-opacity)).
  // With --color-enhancement-opacity at its default (0.1), this should allow our ::before gradient to show through.
}

// Further integration for nav items, building upon _sn_atmospheric.scss styles
// This ensures hover/active states also feel part of the new background.
.main-yourLibrary-yourLibrary .main-rootlist-wrapper .spicetify-playlist-list {
  li {
    // Slightly more pronounced effect on hover to match the new background intensity
    &:hover {
      background: rgba(var(--sn-gradient-primary-rgb), 0.15);
      box-shadow: 0 0 15px rgba(var(--sn-gradient-primary-rgb), 0.2);
      transform: translateX(3px) scale(1.01);
    }

    &[aria-selected="true"],
    &.main-rootlist-rootlistItemActive {
      background: linear-gradient(
        90deg,
        rgba(var(--sn-gradient-accent-rgb), 0.25) 0%,
        rgba(var(--sn-gradient-primary-rgb), 0.1) 100%
      );
      border-left: 3px solid rgba(var(--sn-gradient-accent-rgb), 0.7);
      box-shadow: inset 3px 0 8px -2px rgba(var(--sn-gradient-accent-rgb), 0.3);
    }
  }
}

.main-navBar-navBar .main-navBar-navBarLink {
  &:hover {
    background: rgba(var(--sn-gradient-primary-rgb), 0.2);
    box-shadow: 0 0 15px rgba(var(--sn-gradient-primary-rgb), 0.25);
    transform: translateY(-1px) scale(1.02);
  }

  &.main-navBar-navBarLinkActive {
    background: linear-gradient(
      135deg,
      rgba(var(--sn-gradient-accent-rgb), 0.3) 0%,
      rgba(var(--sn-gradient-primary-rgb), 0.15) 100%
    );
    box-shadow: 0 2px 10px rgba(var(--sn-gradient-accent-rgb), 0.2);
  }
}
// =============================================================================
// END OF SIDEBAR THEMATIC INTEGRATION
// =============================================================================

// ████████████████████████████████████████████████████████████████████████████████
// QUANTUM SIDEBAR CONSCIOUSNESS FIELD - Dynamic Harmonic & Energy Responsive UI
// ████████████████████████████████████████████████████████████████████████████████

:root {
  // Base variables for Quantum Sidebar. These can be adjusted.
  --sn-sidebar-base-bg-opacity: 0.1;
  --sn-sidebar-harmonic-intensity-multiplier: 1;
  --sn-sidebar-energy-glow-opacity: 0;
  --sn-sidebar-temporal-blur: 0px;
  --sn-sidebar-temporal-echo-opacity: 0;
  --sn-sidebar-item-bloom-intensity: 0;

  // Default temporal shift, JS will update this with --sn-sidebar-temporal-shift
  --sn-sidebar-current-temporal-shift: 0s;
}

.Root__nav-bar {
  // Base transition for all dynamic effects
  transition: background-color 0.7s var(--sn-easing-explorer),
    box-shadow 0.7s var(--sn-easing-explorer),
    filter 0.7s var(--sn-easing-explorer);

  // --- Harmonic Mode Styling ---
  // Define a mixin for common harmonic mode background properties
  @mixin harmonic-background($primary-rgb, $secondary-rgb, $accent-rgb) {
    background: linear-gradient(
      170deg,
      rgba(
          $primary-rgb,
          calc(
            var(--sn-sidebar-base-bg-opacity) * 0.7 *
              var(--sn-sidebar-harmonic-intensity-multiplier)
          )
        )
        0%,
      rgba(
          $secondary-rgb,
          calc(
            var(--sn-sidebar-base-bg-opacity) * 0.5 *
              var(--sn-sidebar-harmonic-intensity-multiplier)
          )
        )
        40%,
      rgba(
          $accent-rgb,
          calc(
            var(--sn-sidebar-base-bg-opacity) * 0.8 *
              var(--sn-sidebar-harmonic-intensity-multiplier)
          )
        )
        100%
    );
    box-shadow: inset 0 0 80px -20px rgba($primary-rgb, calc(0.15 *
              var(--sn-sidebar-harmonic-intensity-multiplier))),
      inset 0 0 30px 5px
        rgba(
          $secondary-rgb,
          calc(0.1 * var(--sn-sidebar-harmonic-intensity-multiplier))
        );
  }

  // Apply backgrounds per harmonic mode (JS adds these classes)
  &.sn-harmonic-analogous-flow {
    @include harmonic-background(
      var(--sn-gradient-primary-rgb, "202,158,230"),
      var(--sn-gradient-secondary-rgb, "186,187,241"),
      var(--sn-gradient-accent-rgb, "140,170,238")
    );
    --sn-sidebar-harmonic-intensity-multiplier: 1;
  }
  &.sn-harmonic-triadic-trinity {
    // Example: Use Primary, Accent, and a shifted Primary for Triadic feel
    @include harmonic-background(
      var(--sn-gradient-primary-rgb, "203,166,247"),
      // Mauve as P1
      var(--sn-gradient-accent-rgb, "148,226,213"),
      // Teal as P2 (derived from accent)
      var(--sn-gradient-secondary-rgb, "245,194,231")
        // Pink as P3 (derived from secondary)
    );
    --sn-sidebar-harmonic-intensity-multiplier: 1.1;
  }
  &.sn-harmonic-complementary-yin-yang {
    // Primary and Accent (often complementary)
    @include harmonic-background(
      var(--sn-gradient-primary-rgb, "239,159,118"),
      // Peach as P1
      var(--sn-gradient-accent-rgb, "137,180,250"),
      // Blue as P2 (complement)
      var(--spice-rgb-surface1, "69,71,90") // Neutral darker for depth
    );
    --sn-sidebar-harmonic-intensity-multiplier: 1.2;
  }
  // Add more .sn-harmonic-* classes as needed for other modes from HARMONIC_MODES
  &.sn-harmonic-tetradic-cosmic-cross {
    // Example
    @include harmonic-background(
      var(--spice-rgb-green),
      var(--spice-rgb-red),
      var(--spice-rgb-yellow)
    );
    --sn-sidebar-harmonic-intensity-multiplier: 1.15;
  }
  &.sn-harmonic-split-complementary-aurora {
    // Example
    @include harmonic-background(
      var(--spice-rgb-peach),
      var(--spice-rgb-sky),
      var(--spice-rgb-teal)
    );
    --sn-sidebar-harmonic-intensity-multiplier: 1.05;
  }
  &.sn-harmonic-monochromatic-meditation {
    // Example
    @include harmonic-background(
      var(--sn-gradient-primary-rgb),
      var(--sn-gradient-primary-rgb),
      var(--sn-gradient-primary-rgb)
    );
    --sn-sidebar-harmonic-intensity-multiplier: 0.9;
    --sn-sidebar-base-bg-opacity: 0.2; // More intense for monochromatic
  }

  // --- Music Energy Styling ---
  // (JS adds these classes: sn-music-low-energy, sn-music-mid-energy, sn-music-high-energy)
  &.sn-music-low-energy {
    --sn-sidebar-energy-glow-opacity: 0.1;
    --sn-sidebar-item-bloom-intensity: 0.1;
    filter: saturate(0.85) brightness(0.95);
    animation: sn-sidebar-pulse-slow 8s infinite ease-in-out alternate;
  }
  &.sn-music-mid-energy {
    --sn-sidebar-energy-glow-opacity: 0.25;
    --sn-sidebar-item-bloom-intensity: 0.25;
    filter: saturate(1) brightness(1);
    animation: sn-sidebar-pulse-mid 5s infinite ease-in-out alternate;
  }
  &.sn-music-high-energy {
    --sn-sidebar-energy-glow-opacity: 0.4;
    --sn-sidebar-item-bloom-intensity: 0.5;
    filter: saturate(1.15) brightness(1.05);
    animation: sn-sidebar-pulse-fast 3s infinite ease-in-out alternate;
  }

  // Subtle pulsing animation for the sidebar background based on energy
  @keyframes sn-sidebar-pulse-slow {
    0%,
    100% {
      box-shadow: inset 0 0 70px -25px rgba(var(--sn-gradient-primary-rgb), calc(0.1 *
              var(--sn-sidebar-harmonic-intensity-multiplier) * 0.7));
    }
    50% {
      box-shadow: inset 0 0 80px -20px rgba(var(--sn-gradient-secondary-rgb), calc(0.15 *
              var(--sn-sidebar-harmonic-intensity-multiplier) * 0.7));
    }
  }
  @keyframes sn-sidebar-pulse-mid {
    0%,
    100% {
      box-shadow: inset 0 0 80px -20px rgba(var(--sn-gradient-primary-rgb), calc(0.2 *
              var(--sn-sidebar-harmonic-intensity-multiplier)));
    }
    50% {
      box-shadow: inset 0 0 90px -15px rgba(var(--sn-gradient-secondary-rgb), calc(0.25 *
              var(--sn-sidebar-harmonic-intensity-multiplier)));
    }
  }
  @keyframes sn-sidebar-pulse-fast {
    0%,
    100% {
      box-shadow: inset 0 0 90px -15px rgba(var(--sn-gradient-primary-rgb), calc(0.3 *
              var(--sn-sidebar-harmonic-intensity-multiplier) * 1.2));
    }
    50% {
      box-shadow: inset 0 0 100px -10px rgba(var(--sn-gradient-secondary-rgb), calc(0.35 *
              var(--sn-sidebar-harmonic-intensity-multiplier) * 1.2));
    }
  }

  // --- Temporal Echo Layer Styling ---
  // This uses the --sn-sidebar-temporal-shift variable set by JS
  // Applied to a pseudo-element if existing ones are not sufficient, or integrated into existing ones.
  // Assuming ::after is available or one of the existing ::before/::after from Dimensional Nexus can be augmented.
  // This example augments the ::after from Dimensional Nexus Phase 1 (Quantum Foam & Temporal Displacement)
  &::after {
    // Keep existing Dimensional Nexus ::after styles (Quantum Foam, Temporal Displacement)
    // Add new properties or modify existing ones related to the temporal echo
    transition: opacity 1s ease, filter 1s ease,
      transform var(--sn-sidebar-current-temporal-shift) ease-out; // Added transform

    // Example: Make the temporal echo more pronounced when shift is active
    // The --sn-sidebar-temporal-shift is a duration, not direct opacity/blur value.
    // JS sets this. We can use it to modify animation speed or other properties if needed.
    // For a visual echo effect, we might need another variable from JS for opacity/blur of the echo itself.
    // Let's assume --sn-sidebar-temporal-echo-opacity and --sn-sidebar-temporal-blur are set by JS if needed.
    opacity: calc(
      var(--sn-quantum-foam-opacity, 0.03) +
        var(--sn-sidebar-temporal-echo-opacity, 0)
    );
    filter: blur(var(--sn-sidebar-temporal-blur, 0px)); // Add blur for echo
  }
}

// --- Sidebar Navigation Item Enhancements ---
.Root__nav-bar {
  // Target general navigation links. Adapt selectors as needed.
  .main-navBar-navBarLink,
  .main-yourLibraryX-navLinkContainer a, // For library items in grid/list view
  .main-rootlist-rootlistItem a, // For playlist items in folders
  .main-playlistFolder-textLink {
    position: relative;
    transition: all 0.4s var(--sn-easing-explorer);
    padding: 8px 12px; // Consistent padding
    margin: 2px 4px;
    border-radius: var(--border-radius, 6px);

    &::before {
      // For bloom/glow effect
      content: "";
      position: absolute;
      inset: -2px;
      border-radius: inherit;
      background: radial-gradient(
        ellipse at center,
        rgba(
            var(--sn-gradient-accent-rgb, "140,170,238"),
            calc(var(--sn-sidebar-item-bloom-intensity) * 0.7)
          )
          0%,
        transparent 60%
      );
      opacity: 0;
      transition: opacity 0.4s var(--sn-easing-explorer);
      z-index: -1;
      transform: scale(0.95);
    }

    &:hover,
    &.main-navBar-navBarLinkActive,
    &[aria-current="page"] {
      background-color: rgba(
        var(--sn-gradient-primary-rgb, "202,158,230"),
        0.15
      );
      color: var(--spice-text);
      transform: translateY(-1px) scale(1.02);
      box-shadow: 0 3px 15px -5px rgba(var(--sn-gradient-primary-rgb, "202,158,230"), 0.3);

      &::before {
        // Activate bloom
        opacity: 1;
        transform: scale(1);
      }
    }

    // Energy-based text glow for high energy music
    .sn-music-high-energy & {
      .Type__TypeElement-sc-goliZz-0,
      span {
        text-shadow: 0 0 8px
          rgba(
            var(--sn-gradient-accent-rgb, "140,170,238"),
            calc(0.5 * var(--sn-sidebar-energy-glow-opacity))
          );
      }
    }
  }

  // Specificity for Your Library items if different selectors are needed
  .main-yourLibraryX-listItem .main-useDropTarget-base {
    // Common wrapper for library items
    transition: all 0.4s var(--sn-easing-explorer);
    border-radius: var(--border-radius, 4px);
    padding: 6px 8px;
    margin: 1px 4px;

    &:hover {
      background-color: rgba(
        var(--sn-gradient-primary-rgb, "202,158,230"),
        0.1
      );
      transform: scale(1.01);
      box-shadow: 0 2px 10px -4px rgba(var(--sn-gradient-primary-rgb, "202,158,230"), 0.25);
    } // Closes &:hover

    // Active library item
    &[aria-current="true"],
    .main-yourLibraryX-navLinkActive & {
      // If parent has active class
      background-color: rgba(
        var(--sn-gradient-accent-rgb, "140,170,238"),
        0.15
      );
      box-shadow: inset 0 0 10px -5px rgba(var(--sn-gradient-accent-rgb, "140,170,238"), 0.3);
    } // Closes &[aria-current="true"] / .main-yourLibraryX-navLinkActive &
  } // Closes .main-yourLibraryX-listItem .main-useDropTarget-base

  // Musical DNA Visualization (emoji icons)
  .sn-item-type-playlist::after {
    content: "\1F3A7"; /* 🎧 */
  }
  .sn-item-type-album::after {
    content: "\1F4BF"; /* 💿 */
  }
  .sn-item-type-artist::after {
    content: "\1F3A4"; /* 🎤 */
  }
  .sn-item-type-folder::after {
    content: "\1F4C1"; /* 📁 */
  }

  [class*="sn-item-type-"]::after {
    font-size: 0.8em;
    margin-left: 8px;
    opacity: 0.5;
  }
} // Closes the .Root__nav-bar block for navigation item enhancements

// Animations should be defined if not already present (e.g. var(--sn-easing-explorer) should be defined elsewhere or replaced)
// Assuming --sn-easing-explorer is defined, e.g. cubic-bezier(0.25, 0.46, 0.45, 0.94)

// Ensure this new block is the last major styling block for the sidebar to give it appropriate CSS precedence.
// END OF QUANTUM SIDEBAR CONSCIOUSNESS FIELD
// =============================================================================

// StarryNight settings component styling
.starrynight-settings {
  .setting-row {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 12px 0;
    border-bottom: 1px solid var(--spice-border);

    &:last-child {
      border-bottom: none;
    }

    .setting-label {
      color: var(--spice-text);
      font-size: 14px;
      font-weight: 500;
      min-width: 120px;
    }

    select.main-dropDown-dropDown {
      min-width: 150px;
      background: var(--spice-button);
      color: var(--spice-text);
      border: 1px solid var(--spice-border);
      border-radius: 4px;
      padding: 8px 12px;

      &:hover {
        background: var(--spice-button-active);
      }

      &:focus {
        outline: 2px solid var(--spice-accent);
        outline-offset: 2px;
      }
    }
  }
}

// Integration with main settings page
.main-settingsPage-section {
  .starrynight-settings {
    margin-top: 16px;
  }
}
