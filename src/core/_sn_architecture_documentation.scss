// ████████████████████████████████████████████████████████████████████████████████
// CATPPUCCIN STARRYNIGHT - MODULAR ARCHITECTURE DOCUMENTATION
// ████████████████████████████████████████████████████████████████████████████████
//
// This module provides comprehensive documentation for the StarryNight theme's
// modular architecture, created through a systematic 5-phase refactoring process.
//
// ORIGINAL CHALLENGE:
// - Monolithic _main.scss file with ~2,120 lines
// - Single responsibility principle violations
// - Difficult maintenance and debugging
// - Complex interdependencies
//
// SOLUTION: Modular Architecture
// - 42 focused modules across 6 architectural layers (including Search layer)
// - Single responsibility principle compliance
// - Clear separation of concerns
// - Maintainable and scalable codebase
// ████████████████████████████████████████████████████████████████████████████████

/*
================================================================================
ARCHITECTURAL LAYERS & MODULE ORGANIZATION
================================================================================

LAYER 1: CORE MODULES (src/core/)
├── _variables.scss                 - Global variable defaults
├── _mixins.scss                    - Reusable SCSS mixins and utilities
├── _breathing_scale.scss           - Dynamic breathing scale animation system
├── _beat_sync_variables.scss       - Beat synchronization variable definitions
├── _sn_root_variables.scss         - Consolidated CSS custom properties
├── _sn_gradient.scss               - Gradient helpers & utilities
├── _sn_typography.scss             - Typography system
├── _kinetic-animations.scss        - Kinetic animation helpers
├── _sn_legacy_support.scss         - Backward compatibility support
└── _sn_architecture_documentation.scss - This documentation module

LAYER 2: LAYOUT MODULES (src/layout/)
├── _main_view_container.scss       - Main view container styling
├── _entity_header_enhanced.scss    - Enhanced entity header with holographic effects
├── _top_bar_enhanced.scss          - Top bar with gradient enhancements
├── _action_bar_enhanced.scss       - Action bar with harmonic oscillation
└── _sn_sidebar_navigation.scss     - Enhanced sidebar navigation styling

LAYER 3: COMPONENT MODULES (src/components/)
├── _sn_card_base.scss              - Foundation layer for all card types
├── _sn_card_non_search.scss        - Cosmic atmospheric effects (non-search)
├── _sn_enhanced_cards.scss         - Holographic interactive elements
├── _track_list_enhanced.scss       - Track list with advanced hover effects
├── _sn_loading.scss                - Animated loading skeletons & spinners
└── _now_playing.scss               - Now Playing bar & progress components

LAYER 4: FEATURE MODULES (src/features/)
├── _themed_interactive_components.scss - Interactive component theming
├── _sn_beat_sync_enhanced.scss     - Advanced rhythm synchronization
├── _sn_depth_layers.scss           - 3D depth layer system
├── _sn_z_index_management.scss     - StarryNight effects layer control
├── _sn_glassmorphism.scss          - Glassmorphism effect system
├── _sn_atmospheric.scss            - Atmospheric fog & haze system
├── _sn_stars.scss                  - Star field generator
├── _sn_3d_morphing.scss            - 3D shape morphing engine
├── _sn_context_zones.scss          - Context-aware UI zones
├── _sn_microinteractions.scss      - Microinteraction patterns
└── _advanced_visual_effects_layer.scss - Advanced VFX compositor

LAYER 5: SYSTEM MODULES (src/systems/)
├── _sn_behavioral_prediction.scss    - User interaction prediction system
├── _sn_performance_optimization.scss - GPU acceleration & accessibility
├── _sn_prediction_effects.scss       - Advanced glow & pulse systems
├── _sn_quantum_consciousness.scss    - Quantum sidebar consciousness field
├── _sn_data_glyphs.scss              - Data glyphs & biometric feedback
└── _sidebar_dimensional_nexus.scss    - Sidebar dimensional nexus enhancements (consolidated)

LAYER 6: SEARCH MODULES (src/search/)
├── _sn_search_precision.scss        - Precision-mode search styling
└── _sn_search_quantum.scss          - Quantum search visualization

LEGACY MODULES (src/sidebar/)
├── _sidebar_background_effects.scss - Sidebar background effects (legacy)
└── _sidebar_interactive.scss       - Sidebar interactive elements (legacy)

================================================================================
DEVELOPMENT GUIDELINES
================================================================================

1. SINGLE RESPONSIBILITY PRINCIPLE
   - Each module handles ONE specific aspect of the theme
   - Avoid mixing layout, styling, and system logic in single files
   - Keep modules focused and cohesive

2. DEPENDENCY MANAGEMENT
   - Core modules should have minimal dependencies
   - Layout modules can depend on Core modules
   - Component modules can depend on Core and Layout modules
   - Feature modules can depend on Core, Layout, and Component modules
   - System modules can depend on all other layers

3. NAMING CONVENTIONS
   - Core modules: _module_name.scss
   - StarryNight specific: _sn_module_name.scss
   - Use descriptive, self-documenting names
   - Avoid abbreviations unless widely understood

4. IMPORT ORDER (in _main.scss)
   - Core modules first
   - Layout modules second
   - Component modules third
   - Feature modules fourth
   - System modules last
   - Legacy modules at the end

5. BACKWARD COMPATIBILITY
   - Never remove existing CSS classes without deprecation period
   - Use _sn_legacy_support.scss for compatibility shims
   - Document breaking changes in module headers

================================================================================
PERFORMANCE CONSIDERATIONS
================================================================================

1. CSS CUSTOM PROPERTIES
   - Centralized in _sn_root_variables.scss
   - Use for dynamic theming and animations
   - Prefer CSS variables over SCSS variables for runtime changes

2. GPU ACCELERATION
   - Implemented in _sn_performance_optimization.scss
   - Use transform3d() for hardware acceleration
   - Apply will-change property judiciously

3. ANIMATION OPTIMIZATION
   - Breathing scale system prevents layout thrashing
   - Beat sync variables enable synchronized animations
   - Prediction effects reduce unnecessary repaints

================================================================================
TESTING & MAINTENANCE
================================================================================

1. MODULE TESTING
   - Test each module independently
   - Verify import dependencies work correctly
   - Check for CSS specificity conflicts

2. INTEGRATION TESTING
   - Test complete theme functionality
   - Verify backward compatibility
   - Check performance impact

3. MAINTENANCE WORKFLOW
   - Update individual modules rather than monolithic file
   - Use git blame to track module-specific changes
   - Document changes in module headers

================================================================================
FUTURE DEVELOPMENT
================================================================================

1. NEW FEATURE DEVELOPMENT
   - Create new modules following the architectural layers
   - Add imports to _main.scss in correct order
   - Update this documentation

2. REFACTORING GUIDELINES
   - Extract large functions into focused modules
   - Move shared utilities to Core layer
   - Maintain clear separation of concerns

3. DEPRECATION PROCESS
   - Mark deprecated features in module headers
   - Provide migration path in _sn_legacy_support.scss
   - Remove after appropriate deprecation period

================================================================================
MODULE STATISTICS (Post-Refactoring)
================================================================================

Original _main.scss:     ~2,120 lines (monolithic)
Current _main.scss:      ~120 lines (orchestrator)
Reduction:               ~94% size reduction
Total modules integrated: 42 focused modules
Architecture layers:     6 distinct layers (including Search)
Maintainability:         Significantly improved
Performance:             Optimized through modularization

================================================================================
*/

// This is a documentation-only module - no actual CSS rules
// All styling has been extracted to appropriate functional modules
// Refer to the architectural documentation above for guidance

// ████████████████████████████████████████████████████████████████████████████████
// END OF ARCHITECTURE DOCUMENTATION
// ████████████████████████████████████████████████████████████████████████████████

// ================================================================================================
// NEBULA FIELD VARIABLE FACADE (Phase 1)
// ================================================================================================
// The Nebula Field introduces four CSS custom-property groups that *alias* existing depth-layer &
// gradient variables. This semantic layer gives designers and JavaScript controllers a clear
// contract without duplicating data sources.
//
//   ┌───────────────┬──────────────────────────────────────────────────────────┐
//   │ Variable      │ Upstream Alias                                          │
//   ├───────────────┼──────────────────────────────────────────────────────────┤
//   │ --sn-nebula-layer-0-color-rgb │ --sn-gradient-primary-rgb              │
//   │ --sn-nebula-layer-0-opacity   │ --sn-depth-layer-0-opacity            │
//   │ --sn-nebula-layer-0-blur      │ --sn-depth-layer-0-blur               │
//   │ --sn-nebula-layer-0-scale     │ --sn-depth-layer-0-scale              │
//   │ … repeat for layers 1–3 using gradient-secondary / accent / highlight  │
//   └───────────────┴──────────────────────────────────────────────────────────┘
//
// Controllers MAY update opacity / blur / scale at runtime; colour variables
// should remain theme-driven via gradient tokens. See `src/core/_sn_nebula_variables.scss`.
// ================================================================================================