// Centralised DOM Selector Helpers
// ---------------------------------
// This partial defines reusable mixins that encapsulate Spotify's most
// stable selectors (data-attributes) while keeping legacy class hooks for
// backward compatibility. Import it once via `_mixins.scss` (@forward) so
// every SCSS module instantly gains access.

// Right Sidebar (Now Playing panel)
// Usage: @include right-sidebar-root { … }
@mixin right-sidebar-root {
  div.Root__right-sidebar[data-testid="right-sidebar"],
  .Root__right-sidebar {
    @content;
  }
}

// Left Sidebar (Navigation)
// Usage: @include left-sidebar-root { … }
@mixin left-sidebar-root {
  div[data-testid="Desktop_LeftSidebar_Id"].Root__nav-bar,
  .Root__nav-bar {
    @content;
  }
}

// Now Playing Bottom Bar
// Usage: @include now-playing-bar-root { … }
@mixin now-playing-bar-root {
  aside[data-testid="now-playing-bar"],
  .Root__now-playing-bar {
    @content;
  }
}

// Main View Container (scroll node)
// Usage: @include main-view-root { … }
@mixin main-view-root {
  div.Root__main-view#main-view,
  .Root__main-view {
    @content;
  }
}

// Main View Scroll Node (inner scroll container)
// Usage: @include main-view-scroll-node { … }
@mixin main-view-scroll-node {
  // TODO: refine once a stable attribute hook exists
  .Root__main-view .main-view-container__scroll-node {
    @content;
  }
}

// Main Navigation Link inside the left sidebar ("Main" nav)
// Usage: @include main-nav-link { … }
@mixin main-nav-link {
  nav[aria-label="Main"] ul li a {
    @content;
  }
}

// ═══════════════════════════════════════════════════════════════════════════════
// ENTITY HEADERS & CONTENT PAGES
// ═══════════════════════════════════════════════════════════════════════════════

// Entity Header (Album/Playlist/Artist page headers)
// Usage: @include entity-header-root { … }
@mixin entity-header-root {
  .main-entityHeader-container,
  [data-testid*="entity-header"],
  [class*="entityHeader"] {
    @content;
  }
}

// Entity Header Title
// Usage: @include entity-header-title { … }
@mixin entity-header-title {
  .main-entityHeader-title,
  [class*="entityHeader-title"] {
    @content;
  }
}

// Entity Header Image Container
// Usage: @include entity-header-image { … }
@mixin entity-header-image {
  .main-entityHeader-imageContainer,
  .main-entityHeader-image,
  [class*="entityHeader-image"] {
    @content;
  }
}

// ═══════════════════════════════════════════════════════════════════════════════
// ARTIST-SPECIFIC SELECTORS (Year 3000 Enhanced Detection)
// ═══════════════════════════════════════════════════════════════════════════════

// Artist Page Container (Main view when viewing an artist)
// Usage: @include artist-page-container { … }
@mixin artist-page-container {
  .main-view-container:has([data-testid*="artist"]),
  .main-view-container:has([aria-label*="Artist"]),
  [data-testid*="artist-page"],
  body:has(.main-entityHeader-container) .main-view-container {
    @content;
  }
}

// Artist Entity Header (Nested - combines artist detection + header)
// Usage: @include artist-entity-header { … }
@mixin artist-entity-header {
  .main-entityHeader-container[data-testid*="artist"],
  .main-view-container:has([data-testid*="artist"]) .main-entityHeader-container,
  [data-testid*="artist"] .main-entityHeader-container {
    @content;
  }
}

// ═══════════════════════════════════════════════════════════════════════════════
// ACTION BAR & PLAYBACK CONTROLS
// ═══════════════════════════════════════════════════════════════════════════════

// Action Bar Background (Visual effects layer)
// Usage: @include action-bar-background { … }
@mixin action-bar-background {
  .main-actionBarBackground-background,
  [class*="actionBarBackground"],
  .main-actionBar-ActionBarRow::before {
    @content;
  }
}

// Action Bar Row (Main container)
// Usage: @include action-bar-row { … }
@mixin action-bar-row {
  .main-actionBar-ActionBarRow,
  [class*="actionBar-ActionBarRow"],
  [data-testid*="action-bar"] {
    @content;
  }
}

// Action Bar Controls (Inner control elements)
// Usage: @include action-bar-controls { … }
@mixin action-bar-controls {
  .main-actionBar-ActionBar,
  [class*="actionBar-ActionBar"]:not([class*="Row"]) {
    @content;
  }
}

// Playback Control Buttons (Play, Pause, Shuffle, etc.)
// Usage: @include playback-buttons { … }
@mixin playback-buttons {
  .main-playButton-PlayButton,
  .main-shuffleButton-button,
  .main-button-button,
  [data-testid*="play-button"],
  [data-testid*="control-button"] {
    @content;
  }
}

// Add additional selector helpers below as needed, following the same
// pattern: prefer attribute selectors first, fall back to legacy class names.