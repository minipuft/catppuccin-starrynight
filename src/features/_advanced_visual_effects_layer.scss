// ██████████████████████████████████████████████████████████████████████████████
// ████████ YEAR 3000 VISUAL REALITY BREACH MODULE ████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████
// "We don't enhance interfaces. We TEAR HOLES IN REALITY."
// - Flux, Emergent Systems Choreographer

@use "../core/mixins" as *;

// SASS variable for fractal iteration depth for compile-time logic
$fractal-iteration-depth-sass: 5;

// ═══════════════════════════════════════════════════════════════════════════════
// 🌌 QUANTUM PARTICLE FIELD FOUNDATION
// Content exists as particles in a field rather than static elements
// ═══════════════════════════════════════════════════════════════════════════════

:root {
  // === PARTICLE FIELD DYNAMICS ===
  --particle-count: 200;
  --particle-base-size: 2px;
  --particle-max-size: 8px;
  --particle-field-width: 100vw;
  --particle-field-height: 100vh;
  --particle-velocity: 0.5;
  --particle-interaction-radius: 80px;

  // === NEURAL NETWORK PROPERTIES ===
  --neural-connection-opacity: 0.15;
  --neural-pulse-speed: 2s;
  --neural-dendrite-length: 150px;
  --neural-synapse-intensity: 0.8;

  // === HOLOGRAPHIC DEPTH LAYERS ===
  --hologram-layer-1: translateZ(0px);
  --hologram-layer-2: translateZ(50px);
  --hologram-layer-3: translateZ(100px);
  --hologram-layer-4: translateZ(150px);
  --hologram-layer-5: translateZ(200px);
  --hologram-perspective: 2000px;
  --hologram-fog-density: 0.3;

  // === LIQUID MORPHING PARAMETERS ===
  --liquid-tension: 0.4;
  --liquid-viscosity: 0.6;
  --liquid-surface-ripple: 20px;
  --liquid-flow-speed: 3s;
  --liquid-cohesion: 0.8;

  // === ENERGY FIELD VISUALIZATION ===
  --energy-field-intensity: 1;
  --energy-wave-frequency: 4;
  --energy-harmonics: 3;
  --energy-resonance: 0.7;
  --energy-field-distortion: 15px;

  // === FRACTAL RECURSION DEPTH ===
  --fractal-zoom-level: 1;
  --fractal-iteration-depth: #{$fractal-iteration-depth-sass};
  --fractal-golden-ratio: 1.618;
  --fractal-spiral-tightness: 0.2;
}

// ═══════════════════════════════════════════════════════════════════════════════
// 🔬 PARTICLE FIELD GENERATION
// Create floating particles that form content shapes
// ═══════════════════════════════════════════════════════════════════════════════

@keyframes particle-drift {
  0% {
    transform: translate3d(0, 0, 0) rotate(0deg);
    opacity: 0.1;
  }
  25% {
    transform: translate3d(var(--drift-x), var(--drift-y), var(--drift-z))
      rotate(90deg);
    opacity: 0.8;
  }
  50% {
    transform: translate3d(
        calc(var(--drift-x) * 0.5),
        calc(var(--drift-y) * -0.3),
        calc(var(--drift-z) * 1.2)
      )
      rotate(180deg);
    opacity: 0.6;
  }
  75% {
    transform: translate3d(
        calc(var(--drift-x) * -0.8),
        calc(var(--drift-y) * 0.9),
        calc(var(--drift-z) * 0.4)
      )
      rotate(270deg);
    opacity: 0.9;
  }
  100% {
    transform: translate3d(0, 0, 0) rotate(360deg);
    opacity: 0.1;
  }
}

@keyframes neural-pulse {
  0%,
  100% {
    transform: scale(1);
    filter: brightness(1) saturate(1);
    box-shadow: 0 0 20px rgba(var(--sn-accent-rgb), 0.3),
      0 0 40px rgba(var(--sn-accent-rgb), 0.2);
  }
  50% {
    transform: scale(1.3);
    filter: brightness(1.4) saturate(1.6);
    box-shadow: 0 0 40px rgba(var(--sn-accent-rgb), 0.6),
      0 0 80px rgba(var(--sn-accent-rgb), 0.4),
      0 0 120px rgba(var(--sn-accent-rgb), 0.3);
  }
}

@keyframes liquid-morph {
  0% {
    border-radius: 20% 80% 50% 30% / 40% 60% 70% 20%;
    transform: rotate(0deg) scale(1);
  }
  25% {
    border-radius: 70% 30% 20% 80% / 60% 20% 80% 40%;
    transform: rotate(90deg) scale(1.05);
  }
  50% {
    border-radius: 40% 60% 80% 20% / 30% 70% 20% 80%;
    transform: rotate(180deg) scale(0.95);
  }
  75% {
    border-radius: 80% 20% 60% 40% / 70% 30% 40% 60%;
    transform: rotate(270deg) scale(1.1);
  }
  100% {
    border-radius: 20% 80% 50% 30% / 40% 60% 70% 20%;
    transform: rotate(360deg) scale(1);
  }
}

@keyframes holographic-shimmer {
  0% {
    background-position: -200% 0;
    filter: hue-rotate(0deg) brightness(1);
  }
  50% {
    background-position: 200% 0;
    filter: hue-rotate(180deg) brightness(1.3);
  }
  100% {
    background-position: -200% 0;
    filter: hue-rotate(360deg) brightness(1);
  }
}

@keyframes energy-field-flow {
  0% {
    background-position: 0% 0%;
    transform: translateZ(0) rotateY(0deg);
  }
  25% {
    background-position: 100% 50%;
    transform: translateZ(var(--energy-field-distortion)) rotateY(90deg);
  }
  50% {
    background-position: 0% 100%;
    transform: translateZ(0) rotateY(180deg);
  }
  75% {
    background-position: -100% 50%;
    transform: translateZ(calc(var(--energy-field-distortion) * -1))
      rotateY(270deg);
  }
  100% {
    background-position: 0% 0%;
    transform: translateZ(0) rotateY(360deg);
  }
}

// ═══════════════════════════════════════════════════════════════════════════════
// 🌊 LIQUID MORPHING CONTENT SHAPES
// Content that flows and morphs like liquid
// ═══════════════════════════════════════════════════════════════════════════════

@mixin liquid-content-shape {
  position: relative;
  overflow: visible;

  // Liquid morphing container
  &::before {
    content: "";
    position: absolute;
    top: -20%;
    left: -20%;
    right: -20%;
    bottom: -20%;
    background: linear-gradient(
      45deg,
      rgba(var(--sn-accent-rgb), 0.1) 0%,
      rgba(var(--sn-accent-rgb), 0.15) 30%,
      rgba(var(--sn-accent-rgb), 0.1) 60%,
      transparent 100%
    );
    border-radius: 20% 80% 50% 30% / 40% 60% 70% 20%;
    animation: liquid-morph var(--liquid-flow-speed) ease-in-out infinite;
    z-index: -1;
    filter: blur(15px);
  }

  // Liquid surface tension
  &::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(
      ellipse at center,
      transparent 30%,
      rgba(var(--sn-accent-rgb), 0.05) 60%,
      rgba(var(--sn-accent-rgb), 0.1) 100%
    );
    border-radius: inherit;
    pointer-events: none;
    z-index: 1;
    animation: liquid-morph calc(var(--liquid-flow-speed) * 1.3) ease-in-out
      infinite reverse;
  }
}

// ═══════════════════════════════════════════════════════════════════════════════
// 🧠 NEURAL NETWORK PATHWAY CONNECTIONS
// Visible connections between content elements
// ═══════════════════════════════════════════════════════════════════════════════

@mixin neural-pathway-network {
  position: relative;

  // Neural connection lines
  &::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 100%;
    width: var(--neural-dendrite-length);
    height: 2px;
    background: linear-gradient(
      90deg,
      rgba(var(--sn-accent-rgb), var(--neural-connection-opacity)) 0%,
      rgba(
          var(--sn-accent-rgb),
          calc(var(--neural-connection-opacity) * 0.5)
        )
        50%,
      transparent 100%
    );
    transform: translateY(-50%);
    z-index: 1000;
    pointer-events: none;

    // Neural pulse animation
    animation: neural-pulse var(--neural-pulse-speed) ease-in-out infinite;
  }

  // Synaptic nodes
  &::after {
    content: "";
    position: absolute;
    top: 50%;
    right: calc(-1 * var(--neural-dendrite-length));
    width: 8px;
    height: 8px;
    background: radial-gradient(
      circle,
      rgba(var(--sn-accent-rgb), 0.8) 0%,
      rgba(var(--sn-accent-rgb), 0.4) 70%,
      transparent 100%
    );
    border-radius: 50%;
    transform: translateY(-50%);
    z-index: 1001;
    pointer-events: none;

    // Synaptic firing
    animation: neural-pulse calc(var(--neural-pulse-speed) * 0.7) ease-in-out
      infinite;
  }

  &:hover {
    --neural-connection-opacity: 0.4;
    --neural-synapse-intensity: 1.2;

    // Spread neural activation to nearby elements
    & ~ * {
      --neural-connection-opacity: 0.25;
      animation-duration: calc(var(--neural-pulse-speed) * 0.8);
    }
  }
}

// ═══════════════════════════════════════════════════════════════════════════════
// 🔮 HOLOGRAPHIC DEPTH LAYERS
// True 3D layered interface space
// ═══════════════════════════════════════════════════════════════════════════════

@mixin holographic-depth($layer: 1) {
  transform-style: preserve-3d;
  perspective: var(--hologram-perspective);

  @if $layer == 1 {
    transform: var(--hologram-layer-1);
    filter: brightness(1.1) saturate(1.2);
  } @else if $layer == 2 {
    transform: var(--hologram-layer-2);
    filter: brightness(1) saturate(1);
  } @else if $layer == 3 {
    transform: var(--hologram-layer-3);
    filter: brightness(0.9) saturate(0.8) blur(1px);
  } @else if $layer == 4 {
    transform: var(--hologram-layer-4);
    filter: brightness(0.8) saturate(0.6) blur(2px);
    opacity: 0.8;
  } @else if $layer == 5 {
    transform: var(--hologram-layer-5);
    filter: brightness(0.7) saturate(0.4) blur(3px);
    opacity: 0.6;
  }

  // Holographic shimmer effect
  background: linear-gradient(
    45deg,
    transparent 0%,
    rgba(var(--sn-accent-rgb), 0.1) 25%,
    rgba(var(--sn-accent-rgb), 0.15) 50%,
    rgba(var(--sn-accent-rgb), 0.1) 75%,
    transparent 100%
  );
  background-size: 400% 400%;
  animation: holographic-shimmer 4s ease-in-out infinite;

  // Depth fog
  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      0deg,
      rgba(
          var(--spice-rgb-main),
          calc(var(--hologram-fog-density) * #{$layer} / 5)
        )
        0%,
      transparent 50%,
      rgba(
          var(--spice-rgb-main),
          calc(var(--hologram-fog-density) * #{$layer} / 5)
        )
        100%
    );
    pointer-events: none;
    z-index: -1;
  }
}

// ═══════════════════════════════════════════════════════════════════════════════
// ⚡ ENERGY FIELD VISUALIZATION
// Content as interactive energy fields
// ═══════════════════════════════════════════════════════════════════════════════

@mixin energy-field-content {
  position: relative;
  overflow: visible;

  // Primary energy field
  background: radial-gradient(
      ellipse at 30% 20%,
      rgba(var(--sn-accent-rgb), 0.2) 0%,
      transparent 50%
    ),
    radial-gradient(
      ellipse at 70% 80%,
      rgba(var(--sn-accent-rgb), 0.15) 0%,
      transparent 60%
    ),
    radial-gradient(
      ellipse at 50% 50%,
      rgba(var(--sn-accent-rgb), 0.1) 0%,
      transparent 70%
    );
  background-size: 200% 200%, 250% 250%, 300% 300%;
  animation: energy-field-flow calc(var(--liquid-flow-speed) * 2) linear
    infinite;

  // Energy harmonics overlay
  &::before {
    content: "";
    position: absolute;
    top: -50%;
    left: -50%;
    right: -50%;
    bottom: -50%;
    background: conic-gradient(
      from 0deg,
      transparent 0deg,
      rgba(var(--sn-accent-rgb), 0.05) 60deg,
      transparent 120deg,
      rgba(var(--sn-accent-rgb), 0.05) 180deg,
      transparent 240deg,
      rgba(var(--sn-accent-rgb), 0.05) 300deg,
      transparent 360deg
    );
    animation: energy-field-flow calc(var(--liquid-flow-speed) * 1.5) linear
      infinite reverse;
    pointer-events: none;
    z-index: -1;
    filter: blur(20px);
  }

  // Energy resonance field
  &::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: 300%;
    height: 300%;
    background: radial-gradient(
      circle,
      transparent 0%,
      rgba(var(--sn-accent-rgb), 0.02) 30%,
      rgba(var(--sn-accent-rgb), 0.03) 60%,
      transparent 100%
    );
    transform: translate(-50%, -50%);
    animation: energy-field-flow calc(var(--liquid-flow-speed) * 0.8)
      ease-in-out infinite;
    pointer-events: none;
    z-index: -2;
    opacity: var(--energy-resonance);
  }

  &:hover {
    --energy-field-intensity: 1.8;
    --energy-resonance: 1;

    // Create energy interference patterns with nearby elements
    & ~ * {
      --energy-field-intensity: 1.3;
      animation-duration: calc(var(--liquid-flow-speed) * 1.5);
    }
  }
}

// ═══════════════════════════════════════════════════════════════════════════════
// 🌀 FRACTAL RECURSIVE INTERFACES
// Content that contains infinite zoom-able sub-interfaces
// ═══════════════════════════════════════════════════════════════════════════════

@mixin fractal-recursive-content($depth: 1) {
  position: relative;

  // Main fractal container
  &::before {
    content: "";
    position: absolute;
    top: 20%;
    left: 20%;
    width: 60%;
    height: 60%;
    background: inherit;
    transform: scale(calc(1 / var(--fractal-golden-ratio))) rotate(45deg);
    opacity: 0.6;
    pointer-events: none;
    z-index: 1;

    @if $depth < $fractal-iteration-depth-sass {
      // Recursive iteration
      &::before {
        content: "";
        position: absolute;
        top: 20%;
        left: 20%;
        width: 60%;
        height: 60%;
        background: inherit;
        transform: scale(calc(1 / var(--fractal-golden-ratio))) rotate(45deg);
        opacity: 0.4;
      }
    }
  }

  // Fractal spiral arms
  &::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: conic-gradient(
      from 0deg,
      transparent 0deg,
      rgba(var(--sn-accent-rgb), 0.1) 72deg,
      transparent 144deg,
      rgba(var(--sn-accent-rgb), 0.1) 216deg,
      transparent 288deg,
      rgba(var(--sn-accent-rgb), 0.1) 360deg
    );
    border-radius: 50%;
    animation: energy-field-flow
      calc(var(--liquid-flow-speed) * var(--fractal-spiral-tightness)) linear
      infinite;
    pointer-events: none;
    z-index: 2;
    opacity: 0.3;
  }

  &:hover {
    --fractal-zoom-level: calc(
      var(--fractal-zoom-level) * var(--fractal-golden-ratio)
    );
    transform: scale(var(--fractal-zoom-level));

    &::before {
      opacity: 0.8;
      transform: scale(calc(1 / var(--fractal-golden-ratio))) rotate(90deg);
    }
  }
}

// ═══════════════════════════════════════════════════════════════════════════════
// 🎭 REALITY BREACH INTERFACE IMPLEMENTATION
// Apply the visual revolution to actual Spotify elements
// ═══════════════════════════════════════════════════════════════════════════════

// === PARTICLE FIELD BACKGROUND ===


// === LIQUID MORPHING CONTENT CARDS ===
.main-card-card {
  @include liquid-content-shape;
  @include neural-pathway-network;
  @include holographic-depth(2);
  @include energy-field-content;
  @include fractal-recursive-content(1);

  position: relative;
  border: none !important;
  border-radius: 20% 80% 50% 30% / 40% 60% 70% 20%;
  overflow: visible;
  background: none;
  backdrop-filter: blur(10px) saturate(1.4);

  // Liquid surface
  background: linear-gradient(
    135deg,
    rgba(var(--sn-accent-rgb), 0.08) 0%,
    rgba(var(--sn-accent-rgb), 0.12) 50%,
    rgba(var(--sn-accent-rgb), 0.06) 100%
  );

  // Dynamic morphing
  animation: liquid-morph var(--liquid-flow-speed) ease-in-out infinite;

  &:nth-child(odd) {
    animation-delay: calc(var(--liquid-flow-speed) * -0.3);
    --energy-field-intensity: 1.2;
  }

  &:nth-child(even) {
    animation-delay: calc(var(--liquid-flow-speed) * -0.6);
    --energy-field-intensity: 0.8;
    animation-direction: reverse;
  }

  &:nth-child(3n) {
    @include holographic-depth(3);
    --fractal-zoom-level: 1.1;
  }

  &:nth-child(4n) {
    @include holographic-depth(4);
    --neural-dendrite-length: 200px;
  }

  &:hover {
    @include holographic-depth(1);
    --liquid-flow-speed: 1.5s;
    --energy-field-intensity: 2;
    --neural-connection-opacity: 0.6;

    transform: translateZ(50px) scale(1.05);
    border-radius: 50%;

    // Liquid coalescence effect
    &::before {
      animation-duration: calc(var(--liquid-flow-speed) * 0.5);
      filter: blur(25px);
    }
  }
}

// === HOLOGRAPHIC ARTIST CIRCLES ===
.main-card-card[data-testid*="artist"] {
  @include holographic-depth(3);
  @include energy-field-content;

  border-radius: 50% !important;
  overflow: visible;

  // Holographic interference patterns
  background: conic-gradient(
      from 0deg,
      rgba(var(--sn-accent-rgb), 0.2) 0deg,
      transparent 60deg,
      rgba(var(--sn-accent-rgb), 0.15) 120deg,
      transparent 180deg,
      rgba(var(--sn-accent-rgb), 0.1) 240deg,
      transparent 300deg,
      rgba(var(--sn-accent-rgb), 0.2) 360deg
    ),
    radial-gradient(
      circle,
      rgba(var(--sn-accent-rgb), 0.1) 0%,
      transparent 70%
    );

  animation: holographic-shimmer 3s ease-in-out infinite;

  &::before {
    border-radius: 50%;
    animation: holographic-shimmer 4s ease-in-out infinite reverse;
  }

  &:hover {
    animation-duration: 1.5s;
    transform: translateZ(100px) rotateY(15deg) scale(1.1);

    // Holographic projection effect
    box-shadow: 0 0 60px rgba(var(--sn-accent-rgb), 0.4),
      0 0 120px rgba(var(--sn-accent-rgb), 0.3),
      0 0 180px rgba(var(--sn-accent-rgb), 0.2);
  }
}

// === NEURAL NETWORK SEARCH RESULTS ===
.main-trackList-trackListRow {
  @include neural-pathway-network;
  @include liquid-content-shape;

  position: relative;
  margin: 8px 0;
  border-radius: 15px 50px 25px 60px / 30px 15px 45px 20px;
  background: linear-gradient(
    90deg,
    rgba(var(--sn-accent-rgb), 0.05) 0%,
    rgba(var(--sn-accent-rgb), 0.08) 50%,
    transparent 100%
  );

  // Liquid flow animation
  animation: liquid-morph calc(var(--liquid-flow-speed) * 2) ease-in-out
    infinite;

  &:hover {
    @include holographic-depth(2);

    background: linear-gradient(
      90deg,
      rgba(var(--sn-accent-rgb), 0.15) 0%,
      rgba(var(--sn-accent-rgb), 0.12) 30%,
      rgba(var(--sn-accent-rgb), 0.08) 70%,
      transparent 100%
    );

    transform: translateX(20px) translateZ(30px);
    border-radius: 25px;

    // Neural firing cascade
    & ~ .main-trackList-trackListRow {
      --neural-connection-opacity: 0.3;
      animation-duration: calc(var(--liquid-flow-speed) * 1.5);
    }
  }

  // Currently playing becomes energy nexus
  &.main-trackList-selected,
  &:has(.main-trackList-playingIcon) {
    @include fractal-recursive-content(2);
    @include holographic-depth(1);

    background: radial-gradient(
      ellipse at left,
      rgba(var(--sn-accent-rgb), 0.25) 0%,
      rgba(var(--sn-accent-rgb), 0.15) 40%,
      rgba(var(--sn-accent-rgb), 0.1) 80%,
      transparent 100%
    );

    // Energy field pulsing
    animation: neural-pulse var(--neural-pulse-speed) ease-in-out infinite,
      liquid-morph var(--liquid-flow-speed) ease-in-out infinite;

    // Create energy field around playing track
    box-shadow: 0 0 40px rgba(var(--sn-accent-rgb), 0.3),
      inset 0 0 20px rgba(var(--sn-accent-rgb), 0.2);
  }
}

// === FRACTAL SIDEBAR CONSCIOUSNESS ===
.main-yourLibrary-yourLibrary {
  @include holographic-depth(5);

  position: relative;

  // Fractal background pattern
  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: repeating-linear-gradient(
        45deg,
        transparent 0px,
        rgba(var(--sn-accent-rgb), 0.02) 1px,
        transparent 2px,
        transparent 8px
      ),
      repeating-linear-gradient(
        -45deg,
        transparent 0px,
        rgba(var(--sn-accent-rgb), 0.02) 1px,
        transparent 2px,
        transparent 8px
      );
    pointer-events: none;
    z-index: -1;
    animation: holographic-shimmer 8s linear infinite;
  }

  .spicetify-playlist-list li {
    @include liquid-content-shape;
    @include neural-pathway-network;
    @include energy-field-content;

    margin: 4px 0;
    border-radius: 12px 30px 15px 25px / 20px 12px 28px 15px;

    // Liquid morphing for playlists
    animation: liquid-morph calc(var(--liquid-flow-speed) * 3) ease-in-out
      infinite;

    &:nth-child(odd) {
      animation-delay: calc(var(--liquid-flow-speed) * -0.5);
    }

    &:hover {
      @include holographic-depth(3);
      --energy-field-intensity: 1.5;
      --neural-connection-opacity: 0.4;

      transform: translateX(15px) translateZ(25px);
      border-radius: 20px;
    }

    &[aria-selected="true"],
    &.main-rootlist-rootlistItemActive {
      @include fractal-recursive-content(1);
      @include holographic-depth(1);

      background: linear-gradient(
        90deg,
        rgba(var(--sn-accent-rgb), 0.2) 0%,
        rgba(var(--sn-accent-rgb), 0.15) 50%,
        rgba(var(--sn-accent-rgb), 0.1) 100%
      );

      // Active playlist becomes fractal nexus
      animation: neural-pulse calc(var(--neural-pulse-speed) * 1.5) ease-in-out
        infinite;

      border-left: 4px solid rgba(var(--sn-accent-rgb), 0.8);
      box-shadow: 0 0 30px rgba(var(--sn-accent-rgb), 0.2),
        inset 0 0 15px rgba(var(--sn-accent-rgb), 0.1);
    }
  }
}

// ═══════════════════════════════════════════════════════════════════════════════
// 🌌 MOUSE INTERACTION PARTICLE SYSTEM
// Dynamic particle response to mouse movement
// ═══════════════════════════════════════════════════════════════════════════════

// JavaScript will set these custom properties based on mouse position
body {
  --mouse-x: 50%;
  --mouse-y: 50%;
  --mouse-velocity: 0;
  --interaction-intensity: 0;
}


// ═══════════════════════════════════════════════════════════════════════════════
// 🎛️ ACCESSIBILITY & PERFORMANCE
// Year 3000 with respect for human limitations
// ═══════════════════════════════════════════════════════════════════════════════

@media (prefers-reduced-motion: reduce) {
  // Collapse reality breach to gentle quantum fluctuations
  * {
    animation-duration: 20s !important;
    animation-timing-function: linear !important;
  }

  :root {
    --liquid-flow-speed: 10s;
    --neural-pulse-speed: 8s;
    --energy-field-intensity: 0.3;
    --hologram-fog-density: 0.1;
  }

  // Disable complex morphing, keep gentle energy fields
  .main-card-card,
  .main-trackList-trackListRow,
  .spicetify-playlist-list li {
    animation: energy-field-flow 15s linear infinite;
    border-radius: 12px !important;
  }
}

@media (max-width: 768px) {
  // Adapt reality breach for mobile consciousness
  :root {
    --particle-interaction-radius: 50px;
    --neural-dendrite-length: 80px;
    --hologram-layer-2: translateZ(20px);
    --hologram-layer-3: translateZ(40px);
    --hologram-layer-4: translateZ(60px);
    --hologram-layer-5: translateZ(80px);
    --energy-field-intensity: 0.7;
  }

  // Simplified morphing for touch interfaces
  .main-card-card {
    animation-duration: calc(var(--liquid-flow-speed) * 2);
  }

}

// ═══════════════════════════════════════════════════════════════════════════════
// 🚀 REALITY BREACH COMPLETION
// "We didn't just push boundaries. We shattered them."
// ═══════════════════════════════════════════════════════════════════════════════
