/**
 * CSS-Only Blob Fallback System - Year 3000 Vision
 * 
 * Provides beautiful fluid blob effects that work without WebGL
 * Integrates with existing living gradient base system and visual effects architecture
 * 
 * Features:
 * - Multi-layer blob positioning with fluid movement
 * - Music-responsive animation and color transitions
 * - OKLAB color science integration
 * - Performance-optimized CSS animations
 * - Automatic WebGL-CSS coordination
 */

/* ============================================================================ */
/* CSS BLOB SYSTEM VARIABLES */
/* ============================================================================ */

:root {
  /* Blob system configuration */
  --css-blob-enabled: 1; /* 0 = disabled, 1 = enabled */
  --css-blob-count: 6; /* Number of blob elements */
  --css-blob-opacity: 0.4; /* Base blob opacity */
  --css-blob-size-base: 300px; /* Base blob size */
  --css-blob-size-variation: 0.3; /* Size variation factor */
  
  /* Movement and animation */
  --css-blob-movement-speed: 8000ms; /* Base movement speed */
  --css-blob-breathing-speed: 4000ms; /* Breathing animation speed */
  --css-blob-flow-range: 15%; /* Movement range percentage */
  --css-blob-rotation-range: 360deg; /* Full rotation range */
  
  /* Music responsiveness */
  --css-blob-music-response: 0.5; /* Music response intensity */
  --css-blob-beat-scale: 1.15; /* Scale on beat detection */
  --css-blob-energy-opacity: 0.6; /* Energy-based opacity multiplier */
  
  /* Color and blending */
  --css-blob-blend-mode: screen; /* CSS blend mode */
  --css-blob-color-shift: 0deg; /* Hue rotation for variety */
  --css-blob-saturation: 1.1; /* Color saturation boost */
  
  /* Performance and quality */
  --css-blob-quality: 1; /* 0 = minimal, 1 = full quality */
  --css-blob-filter-quality: 1; /* Filter effects quality */
  --css-blob-blur-amount: 20px; /* Fluid edge blur */
  
  /* Enhanced fluid pattern variables - use existing visual effects system */
  --css-blob-fluid-flow: var(--visual-effects-flow-mode); /* Use existing flow mode */
  --css-blob-membrane-elasticity: var(--visual-effects-membrane-elasticity); /* Use new membrane concept */
  --css-blob-visual-effects-sync: 1; /* Sync with visual effects systems */
  --css-blob-emotional-temperature: var(--visual-effects-musical-emotion); /* Use existing musical emotion */
  --css-blob-cellular-growth: var(--visual-effects-cellular-growth); /* Use new cellular concept */
  --css-blob-fluid-breathing: var(--visual-effects-breathing-intensity); /* Use existing breathing */
  --css-blob-fluid-dynamics: 1; /* Advanced fluid dynamics */
  
  /* Fluid visual effects physics - map to existing and new concepts */
  --css-blob-membrane-tension: var(--visual-effects-surface-tension); /* Use new surface tension concept */
  --css-blob-cellular-mitosis: var(--visual-effects-mitosis-frequency); /* Use new mitosis concept */
  --css-blob-visual-effects-osmosis: var(--visual-effects-osmosis-rate); /* Use new osmosis concept */
  --css-blob-fluid-viscosity: var(--visual-effects-viscosity); /* Use new viscosity concept */
  --css-blob-emotional-conductivity: var(--visual-effects-field-intensity); /* Use existing field intensity */
}

/* ============================================================================ */
/* BLOB CONTAINER AND POSITIONING */
/* ============================================================================ */

/* Main blob container */
.sn-css-blob-container {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: -10; /* Behind WebGL and visual effects layers */
  pointer-events: none;
  overflow: hidden;
  contain: layout style paint;
  
  /* Show only when WebGL is not available or as requested */
  opacity: calc(var(--css-blob-enabled) * var(--visual-effects-css-fallback, 1));
  transition: opacity 800ms var(--sn-anim-easing-smooth, ease-out);
}

/* Individual blob elements - Enhanced with fluid visual effects patterns */
.sn-css-blob {
  position: absolute;
  width: var(--css-blob-size-base);
  height: var(--css-blob-size-base);
  pointer-events: none;
  will-change: transform, opacity, filter, border-radius;
  contain: layout style;
  
  /* Fluid membrane shape - deforms based on visual effects */
  border-radius: 
    calc(50% + var(--css-blob-membrane-elasticity) * var(--visual-effects-oklab-chroma) * 10%)
    calc(50% - var(--css-blob-membrane-elasticity) * var(--visual-effects-oklab-luminance) * 8%)
    calc(50% + var(--css-blob-membrane-elasticity) * var(--visual-effects-oklab-hue) * 0.05%)
    calc(50% - var(--css-blob-membrane-elasticity) * var(--css-blob-emotional-temperature) * 12%);
  
  /* Enhanced fluid blob gradient with cellular visual effects */
  background: 
    /* Core cellular nucleus */
    radial-gradient(
      ellipse 25% 30% at calc(30% + var(--css-blob-visual-effects-osmosis) * 20%) calc(40% + var(--css-blob-emotional-temperature) * 10%),
      rgba(var(--visual-effects-oklab-primary-rgb), calc(var(--css-blob-opacity) * var(--visual-effects-oklab-luminance) * (1 + var(--css-blob-cellular-growth) * 0.3))) 0%,
      rgba(var(--visual-effects-oklab-accent-rgb), calc(var(--css-blob-opacity) * 0.7 * var(--visual-effects-oklab-chroma))) 35%,
      transparent 70%
    ),
    /* Cellular membrane layer */
    radial-gradient(
      ellipse calc(40% + var(--css-blob-membrane-tension) * 10%) calc(50% - var(--css-blob-membrane-tension) * 5%) at 50% 50%,
      rgba(var(--visual-effects-oklab-highlight-rgb), calc(var(--css-blob-opacity) * 0.4 * var(--visual-effects-oklab-luminance) * var(--css-blob-cellular-mitosis))) 0%,
      rgba(var(--visual-effects-oklab-shadow-rgb), calc(var(--css-blob-opacity) * 0.2)) 60%,
      transparent 90%
    ),
    /* Outer visual effects field */
    radial-gradient(
      circle calc(60% + var(--css-blob-emotional-conductivity) * 20%) at 50% 50%,
      rgba(var(--visual-effects-oklab-accent-rgb), calc(var(--css-blob-opacity) * 0.1 * var(--css-blob-visual-effects-sync))) 0%,
      transparent 100%
    );
  
  /* Enhanced fluid visual effects with system responsiveness */
  filter: 
    blur(calc(var(--css-blob-blur-amount) * var(--css-blob-filter-quality) * (1 + var(--css-blob-fluid-flow) * var(--css-blob-fluid-viscosity) * 0.2)))
    saturate(calc(var(--css-blob-saturation) * (1 + var(--visual-effects-oklab-chroma) * var(--css-blob-emotional-conductivity) * 0.3)))
    brightness(calc(1.0 + var(--visual-effects-oklab-luminance) * var(--css-blob-visual-effects-sync) * 0.15))
    hue-rotate(calc(var(--css-blob-color-shift) + var(--visual-effects-oklab-hue) * var(--css-blob-emotional-temperature) * 0.02deg))
    contrast(calc(1.0 + var(--css-blob-membrane-tension) * 0.1));
  
  /* Organic membrane blending */
  mix-blend-mode: var(--css-blob-blend-mode);
  
  /* Performance optimizations with fluid transforms */
  transform: translateZ(0) 
    scale(calc(1 + var(--css-blob-cellular-growth) * var(--css-blob-emotional-temperature) * 0.05));
  backface-visibility: hidden;
}

/* ============================================================================ */
/* INDIVIDUAL BLOB POSITIONING AND CHARACTERISTICS */
/* ============================================================================ */

/* Blob 1 - Top left area */
.sn-css-blob:nth-child(1) {
  top: 10%;
  left: 20%;
  width: calc(var(--css-blob-size-base) * 1.2);
  height: calc(var(--css-blob-size-base) * 0.8);
  
  background: radial-gradient(
    ellipse 60% 40% at 25% 30%,
    rgba(var(--visual-effects-oklab-primary-rgb), calc(var(--css-blob-opacity) * 0.9 * var(--visual-effects-oklab-luminance))) 0%,
    rgba(var(--visual-effects-oklab-accent-rgb), calc(var(--css-blob-opacity) * 0.6 * var(--visual-effects-oklab-chroma))) 40%,
    transparent 80%
  );
  
  animation: 
    css-blob-fluid-movement-1 var(--css-blob-movement-speed) ease-in-out infinite,
    css-blob-breathing-1 var(--css-blob-breathing-speed) ease-in-out infinite;
}

/* Blob 2 - Top right area */
.sn-css-blob:nth-child(2) {
  top: 15%;
  right: 25%;
  width: calc(var(--css-blob-size-base) * 0.9);
  height: calc(var(--css-blob-size-base) * 1.1);
  
  background: radial-gradient(
    ellipse 40% 60% at 75% 70%,
    rgba(var(--visual-effects-oklab-accent-rgb), calc(var(--css-blob-opacity) * 0.8 * var(--visual-effects-oklab-chroma))) 0%,
    rgba(var(--visual-effects-oklab-highlight-rgb), calc(var(--css-blob-opacity) * 0.5 * var(--visual-effects-oklab-luminance))) 50%,
    transparent 85%
  );
  
  animation: 
    css-blob-fluid-movement-2 calc(var(--css-blob-movement-speed) * 1.2) ease-in-out infinite,
    css-blob-breathing-2 calc(var(--css-blob-breathing-speed) * 0.8) ease-in-out infinite;
}

/* Blob 3 - Center area */
.sn-css-blob:nth-child(3) {
  top: 40%;
  left: 45%;
  width: calc(var(--css-blob-size-base) * 0.7);
  height: calc(var(--css-blob-size-base) * 0.7);
  
  background: radial-gradient(
    circle 30% at 50% 50%,
    rgba(var(--visual-effects-oklab-highlight-rgb), calc(var(--css-blob-opacity) * 0.7 * var(--visual-effects-oklab-luminance))) 0%,
    rgba(var(--visual-effects-oklab-shadow-rgb), calc(var(--css-blob-opacity) * 0.3)) 70%,
    transparent 100%
  );
  
  animation: 
    css-blob-fluid-movement-3 calc(var(--css-blob-movement-speed) * 0.9) ease-in-out infinite,
    css-blob-breathing-3 calc(var(--css-blob-breathing-speed) * 1.1) ease-in-out infinite;
}

/* Blob 4 - Bottom left area */
.sn-css-blob:nth-child(4) {
  bottom: 20%;
  left: 30%;
  width: calc(var(--css-blob-size-base) * 1.0);
  height: calc(var(--css-blob-size-base) * 0.9);
  
  background: radial-gradient(
    ellipse 50% 35% at 40% 25%,
    rgba(var(--visual-effects-oklab-shadow-rgb), calc(var(--css-blob-opacity) * 0.8)) 0%,
    rgba(var(--visual-effects-oklab-primary-rgb), calc(var(--css-blob-opacity) * 0.4 * var(--visual-effects-oklab-luminance))) 45%,
    transparent 90%
  );
  
  animation: 
    css-blob-fluid-movement-4 calc(var(--css-blob-movement-speed) * 1.3) ease-in-out infinite,
    css-blob-breathing-4 calc(var(--css-blob-breathing-speed) * 0.9) ease-in-out infinite;
}

/* Blob 5 - Bottom right area */
.sn-css-blob:nth-child(5) {
  bottom: 25%;
  right: 20%;
  width: calc(var(--css-blob-size-base) * 0.8);
  height: calc(var(--css-blob-size-base) * 1.0);
  
  background: radial-gradient(
    ellipse 35% 50% at 65% 75%,
    rgba(var(--visual-effects-oklab-accent-rgb), calc(var(--css-blob-opacity) * 0.7 * var(--visual-effects-oklab-chroma))) 0%,
    rgba(var(--visual-effects-oklab-shadow-rgb), calc(var(--css-blob-opacity) * 0.4)) 60%,
    transparent 85%
  );
  
  animation: 
    css-blob-fluid-movement-5 calc(var(--css-blob-movement-speed) * 0.8) ease-in-out infinite,
    css-blob-breathing-5 calc(var(--css-blob-breathing-speed) * 1.2) ease-in-out infinite;
}

/* Blob 6 - Mid-left area */
.sn-css-blob:nth-child(6) {
  top: 50%;
  left: 15%;
  width: calc(var(--css-blob-size-base) * 1.1);
  height: calc(var(--css-blob-size-base) * 0.6);
  
  background: radial-gradient(
    ellipse 25% at 20% 80%,
    rgba(var(--visual-effects-oklab-highlight-rgb), calc(var(--css-blob-opacity) * 0.6 * var(--visual-effects-oklab-luminance))) 0%,
    rgba(var(--visual-effects-oklab-primary-rgb), calc(var(--css-blob-opacity) * 0.3 * var(--visual-effects-oklab-chroma))) 80%,
    transparent 100%
  );
  
  animation: 
    css-blob-fluid-movement-6 calc(var(--css-blob-movement-speed) * 1.1) ease-in-out infinite,
    css-blob-breathing-6 calc(var(--css-blob-breathing-speed) * 0.7) ease-in-out infinite;
}

/* ============================================================================ */
/* ORGANIC MOVEMENT ANIMATIONS */
/* ============================================================================ */

@keyframes css-blob-fluid-movement-1 {
  0% { 
    transform: translateZ(0) translate(0%, 0%) rotate(0deg) scale(1);
  }
  25% { 
    transform: translateZ(0) translate(calc(var(--css-blob-flow-range) * 0.8), calc(var(--css-blob-flow-range) * 0.3)) rotate(45deg) scale(1.05);
  }
  50% { 
    transform: translateZ(0) translate(calc(var(--css-blob-flow-range) * 1.2), calc(var(--css-blob-flow-range) * -0.2)) rotate(90deg) scale(0.95);
  }
  75% { 
    transform: translateZ(0) translate(calc(var(--css-blob-flow-range) * 0.4), calc(var(--css-blob-flow-range) * -0.8)) rotate(180deg) scale(1.08);
  }
  100% { 
    transform: translateZ(0) translate(0%, 0%) rotate(360deg) scale(1);
  }
}

@keyframes css-blob-fluid-movement-2 {
  0% { 
    transform: translateZ(0) translate(0%, 0%) rotate(0deg) scale(1);
  }
  33% { 
    transform: translateZ(0) translate(calc(var(--css-blob-flow-range) * -0.6), calc(var(--css-blob-flow-range) * 0.9)) rotate(120deg) scale(0.9);
  }
  66% { 
    transform: translateZ(0) translate(calc(var(--css-blob-flow-range) * -1.1), calc(var(--css-blob-flow-range) * -0.4)) rotate(240deg) scale(1.12);
  }
  100% { 
    transform: translateZ(0) translate(0%, 0%) rotate(360deg) scale(1);
  }
}

@keyframes css-blob-fluid-movement-3 {
  0% { 
    transform: translateZ(0) translate(0%, 0%) rotate(0deg) scale(1);
  }
  20% { 
    transform: translateZ(0) translate(calc(var(--css-blob-flow-range) * 0.5), calc(var(--css-blob-flow-range) * 0.7)) rotate(72deg) scale(1.06);
  }
  40% { 
    transform: translateZ(0) translate(calc(var(--css-blob-flow-range) * 1.0), calc(var(--css-blob-flow-range) * 0.2)) rotate(144deg) scale(0.94);
  }
  60% { 
    transform: translateZ(0) translate(calc(var(--css-blob-flow-range) * 0.3), calc(var(--css-blob-flow-range) * -0.6)) rotate(216deg) scale(1.03);
  }
  80% { 
    transform: translateZ(0) translate(calc(var(--css-blob-flow-range) * -0.4), calc(var(--css-blob-flow-range) * -0.3)) rotate(288deg) scale(0.97);
  }
  100% { 
    transform: translateZ(0) translate(0%, 0%) rotate(360deg) scale(1);
  }
}

@keyframes css-blob-fluid-movement-4 {
  0% { 
    transform: translateZ(0) translate(0%, 0%) rotate(0deg) scale(1);
  }
  30% { 
    transform: translateZ(0) translate(calc(var(--css-blob-flow-range) * 0.7), calc(var(--css-blob-flow-range) * -0.5)) rotate(108deg) scale(1.04);
  }
  60% { 
    transform: translateZ(0) translate(calc(var(--css-blob-flow-range) * -0.3), calc(var(--css-blob-flow-range) * -1.0)) rotate(216deg) scale(0.92);
  }
  100% { 
    transform: translateZ(0) translate(0%, 0%) rotate(360deg) scale(1);
  }
}

@keyframes css-blob-fluid-movement-5 {
  0% { 
    transform: translateZ(0) translate(0%, 0%) rotate(0deg) scale(1);
  }
  40% { 
    transform: translateZ(0) translate(calc(var(--css-blob-flow-range) * -0.8), calc(var(--css-blob-flow-range) * 0.6)) rotate(144deg) scale(1.07);
  }
  80% { 
    transform: translateZ(0) translate(calc(var(--css-blob-flow-range) * -0.2), calc(var(--css-blob-flow-range) * -0.7)) rotate(288deg) scale(0.96);
  }
  100% { 
    transform: translateZ(0) translate(0%, 0%) rotate(360deg) scale(1);
  }
}

@keyframes css-blob-fluid-movement-6 {
  0% { 
    transform: translateZ(0) translate(0%, 0%) rotate(0deg) scale(1);
  }
  50% { 
    transform: translateZ(0) translate(calc(var(--css-blob-flow-range) * 1.3), calc(var(--css-blob-flow-range) * 0.4)) rotate(180deg) scale(0.88);
  }
  100% { 
    transform: translateZ(0) translate(0%, 0%) rotate(360deg) scale(1);
  }
}

/* ============================================================================ */
/* ENHANCED ORGANIC CONSCIOUSNESS ANIMATIONS */
/* ============================================================================ */

/* Cellular mitosis animation - fluid division patterns */
@keyframes css-blob-cellular-mitosis {
  0% {
    border-radius: 50%;
    transform: scale(1);
  }
  25% {
    border-radius: 60% 40% 40% 60%;
    transform: scale(1.05);
  }
  50% {
    border-radius: 40% 60% 60% 40%;
    transform: scale(0.95) rotate(180deg);
  }
  75% {
    border-radius: 65% 35% 50% 50%;
    transform: scale(1.08) rotate(270deg);
  }
  100% {
    border-radius: 50%;
    transform: scale(1) rotate(360deg);
  }
}

/* Consciousness osmosis - energy flow between blobs */
@keyframes css-blob-visual-effects-osmosis {
  0% {
    opacity: calc(var(--css-blob-opacity) * 1.0);
    filter: brightness(1.0) contrast(1.0);
  }
  33% {
    opacity: calc(var(--css-blob-opacity) * 0.7);
    filter: brightness(0.9) contrast(1.1);
  }
  66% {
    opacity: calc(var(--css-blob-opacity) * 1.3);
    filter: brightness(1.1) contrast(0.9);
  }
  100% {
    opacity: calc(var(--css-blob-opacity) * 1.0);
    filter: brightness(1.0) contrast(1.0);
  }
}

/* Membrane elasticity deformation */
@keyframes css-blob-membrane-deformation {
  0% {
    border-radius: 50%;
  }
  20% {
    border-radius: calc(50% + var(--css-blob-membrane-elasticity) * 15%) 
                   calc(50% - var(--css-blob-membrane-elasticity) * 10%)
                   calc(50% + var(--css-blob-membrane-elasticity) * 5%)
                   calc(50% - var(--css-blob-membrane-elasticity) * 12%);
  }
  40% {
    border-radius: calc(50% - var(--css-blob-membrane-elasticity) * 8%)
                   calc(50% + var(--css-blob-membrane-elasticity) * 18%)
                   calc(50% - var(--css-blob-membrane-elasticity) * 6%)
                   calc(50% + var(--css-blob-membrane-elasticity) * 14%);
  }
  60% {
    border-radius: calc(50% + var(--css-blob-membrane-elasticity) * 12%)
                   calc(50% - var(--css-blob-membrane-elasticity) * 5%)
                   calc(50% + var(--css-blob-membrane-elasticity) * 20%)
                   calc(50% - var(--css-blob-membrane-elasticity) * 8%);
  }
  80% {
    border-radius: calc(50% - var(--css-blob-membrane-elasticity) * 10%)
                   calc(50% + var(--css-blob-membrane-elasticity) * 7%)
                   calc(50% - var(--css-blob-membrane-elasticity) * 15%)
                   calc(50% + var(--css-blob-membrane-elasticity) * 9%);
  }
  100% {
    border-radius: 50%;
  }
}

/* Emotional temperature color shifting */
@keyframes css-blob-emotional-temperature {
  0% {
    filter: 
      hue-rotate(0deg)
      saturate(calc(1.0 + var(--css-blob-emotional-temperature) * 0.2))
      brightness(calc(1.0 + var(--css-blob-emotional-temperature) * 0.1));
  }
  25% {
    filter: 
      hue-rotate(calc(var(--css-blob-emotional-temperature) * 15deg))
      saturate(calc(1.1 + var(--css-blob-emotional-temperature) * 0.3))
      brightness(calc(1.05 + var(--css-blob-emotional-temperature) * 0.15));
  }
  50% {
    filter: 
      hue-rotate(calc(var(--css-blob-emotional-temperature) * 30deg))
      saturate(calc(1.2 + var(--css-blob-emotional-temperature) * 0.4))
      brightness(calc(1.1 + var(--css-blob-emotional-temperature) * 0.2));
  }
  75% {
    filter: 
      hue-rotate(calc(var(--css-blob-emotional-temperature) * 10deg))
      saturate(calc(1.15 + var(--css-blob-emotional-temperature) * 0.25))
      brightness(calc(1.08 + var(--css-blob-emotional-temperature) * 0.12));
  }
  100% {
    filter: 
      hue-rotate(0deg)
      saturate(calc(1.0 + var(--css-blob-emotional-temperature) * 0.2))
      brightness(calc(1.0 + var(--css-blob-emotional-temperature) * 0.1));
  }
}

/* ============================================================================ */
/* ORGANIC BREATHING ANIMATIONS */
/* ============================================================================ */

@keyframes css-blob-breathing-1 {
  0% { 
    opacity: calc(var(--css-blob-opacity) * 0.9 * var(--visual-effects-oklab-luminance));
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 1.0))
      saturate(calc(var(--css-blob-saturation) * 1.0))
      brightness(1.0);
  }
  50% { 
    opacity: calc(var(--css-blob-opacity) * 1.1 * var(--visual-effects-oklab-luminance));
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 0.8))
      saturate(calc(var(--css-blob-saturation) * 1.15))
      brightness(1.05);
  }
  100% { 
    opacity: calc(var(--css-blob-opacity) * 0.9 * var(--visual-effects-oklab-luminance));
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 1.0))
      saturate(calc(var(--css-blob-saturation) * 1.0))
      brightness(1.0);
  }
}

@keyframes css-blob-breathing-2 {
  0% { 
    opacity: calc(var(--css-blob-opacity) * 0.8 * var(--visual-effects-oklab-chroma));
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 1.1))
      saturate(calc(var(--css-blob-saturation) * 0.95))
      brightness(0.98);
  }
  50% { 
    opacity: calc(var(--css-blob-opacity) * 1.2 * var(--visual-effects-oklab-chroma));
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 0.7))
      saturate(calc(var(--css-blob-saturation) * 1.2))
      brightness(1.08);
  }
  100% { 
    opacity: calc(var(--css-blob-opacity) * 0.8 * var(--visual-effects-oklab-chroma));
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 1.1))
      saturate(calc(var(--css-blob-saturation) * 0.95))
      brightness(0.98);
  }
}

@keyframes css-blob-breathing-3 {
  0% { 
    opacity: calc(var(--css-blob-opacity) * 0.7 * var(--visual-effects-oklab-luminance));
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 1.2))
      saturate(calc(var(--css-blob-saturation) * 0.9))
      brightness(0.96);
  }
  50% { 
    opacity: calc(var(--css-blob-opacity) * 1.3 * var(--visual-effects-oklab-luminance));
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 0.6))
      saturate(calc(var(--css-blob-saturation) * 1.25))
      brightness(1.12);
  }
  100% { 
    opacity: calc(var(--css-blob-opacity) * 0.7 * var(--visual-effects-oklab-luminance));
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 1.2))
      saturate(calc(var(--css-blob-saturation) * 0.9))
      brightness(0.96);
  }
}

@keyframes css-blob-breathing-4 {
  0% { 
    opacity: calc(var(--css-blob-opacity) * 0.8);
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 1.0))
      saturate(calc(var(--css-blob-saturation) * 1.0))
      brightness(1.0);
  }
  50% { 
    opacity: calc(var(--css-blob-opacity) * 1.1);
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 0.8))
      saturate(calc(var(--css-blob-saturation) * 1.18))
      brightness(1.06);
  }
  100% { 
    opacity: calc(var(--css-blob-opacity) * 0.8);
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 1.0))
      saturate(calc(var(--css-blob-saturation) * 1.0))
      brightness(1.0);
  }
}

@keyframes css-blob-breathing-5 {
  0% { 
    opacity: calc(var(--css-blob-opacity) * 0.7 * var(--visual-effects-oklab-chroma));
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 1.15))
      saturate(calc(var(--css-blob-saturation) * 0.92))
      brightness(0.97);
  }
  50% { 
    opacity: calc(var(--css-blob-opacity) * 1.25 * var(--visual-effects-oklab-chroma));
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 0.65))
      saturate(calc(var(--css-blob-saturation) * 1.22))
      brightness(1.09);
  }
  100% { 
    opacity: calc(var(--css-blob-opacity) * 0.7 * var(--visual-effects-oklab-chroma));
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 1.15))
      saturate(calc(var(--css-blob-saturation) * 0.92))
      brightness(0.97);
  }
}

@keyframes css-blob-breathing-6 {
  0% { 
    opacity: calc(var(--css-blob-opacity) * 0.6 * var(--visual-effects-oklab-luminance));
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 1.3))
      saturate(calc(var(--css-blob-saturation) * 0.85))
      brightness(0.94);
  }
  50% { 
    opacity: calc(var(--css-blob-opacity) * 1.4 * var(--visual-effects-oklab-luminance));
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 0.5))
      saturate(calc(var(--css-blob-saturation) * 1.3))
      brightness(1.15);
  }
  100% { 
    opacity: calc(var(--css-blob-opacity) * 0.6 * var(--visual-effects-oklab-luminance));
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 1.3))
      saturate(calc(var(--css-blob-saturation) * 0.85))
      brightness(0.94);
  }
}

/* ============================================================================ */
/* MUSIC RESPONSIVENESS */
/* ============================================================================ */

/* Beat detection response */
.sn-css-blob.sn-beat-active {
  animation-duration: 
    calc(var(--css-blob-movement-speed) * 0.8), 
    calc(var(--css-blob-breathing-speed) * 0.6);
  
  transform: scale(var(--css-blob-beat-scale)) !important;
  transition: transform 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

/* High energy music response */
html[style*="--visual-effects-music-energy: 1"] .sn-css-blob {
  --css-blob-movement-speed: 6000ms;
  --css-blob-breathing-speed: 3000ms;
  --css-blob-opacity: calc(var(--css-blob-energy-opacity) * 1.2);
  --css-blob-saturation: 1.25;
  --css-blob-color-shift: 5deg;
}

/* Low energy music response */
html[style*="--visual-effects-music-energy: 0"] .sn-css-blob {
  --css-blob-movement-speed: 12000ms;
  --css-blob-breathing-speed: 8000ms;
  --css-blob-opacity: calc(var(--css-blob-energy-opacity) * 0.8);
  --css-blob-saturation: 0.95;
}

/* Genre-responsive color variations */
.sn-css-blob.genre-electronic {
  --css-blob-color-shift: 15deg;
  --css-blob-saturation: 1.3;
  --css-blob-blend-mode: screen;
}

.sn-css-blob.genre-ambient {
  --css-blob-color-shift: -10deg;
  --css-blob-saturation: 0.9;
  --css-blob-blend-mode: multiply;
  --css-blob-opacity: 0.3;
}

.sn-css-blob.genre-classical {
  --css-blob-color-shift: 2deg;
  --css-blob-saturation: 1.05;
  --css-blob-blend-mode: soft-light;
}

/* ============================================================================ */
/* WEBGL COORDINATION */
/* ============================================================================ */

/* When WebGL is active, reduce CSS blob prominence */
html[style*="--sn-webgl-enabled: 1"] .sn-css-blob-container {
  opacity: calc(
    var(--css-blob-enabled) * 
    var(--visual-effects-css-fallback, 1) * 
    (1 - var(--visual-effects-webgl-coordination, 0) * 0.8)
  );
  
  .sn-css-blob {
    transform: scale(0.7) translateZ(0);
    filter: 
      blur(calc(var(--css-blob-blur-amount) * 1.5))
      saturate(calc(var(--css-blob-saturation) * 0.8))
      brightness(0.9);
  }
}

/* WebGL transition coordination */
.sn-css-blob-container {
  transition: 
    opacity 800ms var(--sn-anim-easing-smooth, ease-out),
    transform 600ms var(--sn-anim-easing-smooth, ease-out);
}

/* ============================================================================ */
/* PERFORMANCE OPTIMIZATIONS */
/* ============================================================================ */

/* Performance mode - simplified blobs */
.sn-performance-mode .sn-css-blob {
  --css-blob-filter-quality: 0;
  --css-blob-blur-amount: 10px;
  animation-duration: 
    calc(var(--css-blob-movement-speed) * 2), 
    calc(var(--css-blob-breathing-speed) * 1.5) !important;
  filter: blur(10px) !important;
}

/* Low-end device optimizations */
@media (max-width: 768px), (prefers-reduced-motion: reduce) {
  .sn-css-blob {
    --css-blob-blur-amount: 5px;
    --css-blob-filter-quality: 0;
    animation-duration: 
      calc(var(--css-blob-movement-speed) * 1.5), 
      calc(var(--css-blob-breathing-speed) * 1.2) !important;
    
    filter: blur(5px) saturate(1) brightness(1) !important;
    mix-blend-mode: normal !important;
  }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  .sn-css-blob {
    animation: none !important;
    transform: translateZ(0) scale(1) !important;
    opacity: calc(var(--css-blob-opacity) * 0.5) !important;
  }
}

/* Battery optimization */
:root[data-sn-mode="battery-optimized"] .sn-css-blob-container {
  --css-blob-enabled: 0;
  opacity: 0 !important;
}

/* ============================================================================ */
/* ORGANIC CONSCIOUSNESS INTEGRATION */
/* ============================================================================ */

/* Enhanced fluid visual effects animations - applied when fluid flow is enabled */
.sn-css-blob {
  /* Base fluid visual effects animations */
  animation: 
    css-blob-fluid-movement-1 var(--css-blob-movement-speed) ease-in-out infinite,
    css-blob-breathing-1 var(--css-blob-breathing-speed) ease-in-out infinite,
    css-blob-cellular-mitosis calc(var(--css-blob-movement-speed) * 1.8 * var(--css-blob-cellular-growth)) ease-in-out infinite,
    css-blob-visual-effects-osmosis calc(var(--css-blob-breathing-speed) * 1.2 * var(--css-blob-visual-effects-sync)) ease-in-out infinite,
    css-blob-membrane-deformation calc(var(--css-blob-movement-speed) * 0.7 * var(--css-blob-membrane-elasticity)) ease-in-out infinite,
    css-blob-emotional-temperature calc(var(--css-blob-breathing-speed) * 2.5 * var(--css-blob-emotional-temperature)) ease-in-out infinite;
    
  /* Organic animation delays for natural variation */
  animation-delay: 
    0ms,
    calc(var(--css-blob-breathing-speed) * 0.1),
    calc(var(--css-blob-movement-speed) * 0.3),
    calc(var(--css-blob-breathing-speed) * 0.2),
    calc(var(--css-blob-movement-speed) * 0.15),
    calc(var(--css-blob-breathing-speed) * 0.4);
}

/* Individual blob fluid variations */
.sn-css-blob:nth-child(2) {
  animation-delay: 
    calc(var(--css-blob-movement-speed) * 0.15),
    calc(var(--css-blob-breathing-speed) * 0.25),
    calc(var(--css-blob-movement-speed) * 0.45),
    calc(var(--css-blob-breathing-speed) * 0.35),
    calc(var(--css-blob-movement-speed) * 0.28),
    calc(var(--css-blob-breathing-speed) * 0.55);
}

.sn-css-blob:nth-child(3) {
  animation-delay: 
    calc(var(--css-blob-movement-speed) * 0.3),
    calc(var(--css-blob-breathing-speed) * 0.4),
    calc(var(--css-blob-movement-speed) * 0.6),
    calc(var(--css-blob-breathing-speed) * 0.5),
    calc(var(--css-blob-movement-speed) * 0.42),
    calc(var(--css-blob-breathing-speed) * 0.7);
}

.sn-css-blob:nth-child(4) {
  animation-delay: 
    calc(var(--css-blob-movement-speed) * 0.45),
    calc(var(--css-blob-breathing-speed) * 0.55),
    calc(var(--css-blob-movement-speed) * 0.75),
    calc(var(--css-blob-breathing-speed) * 0.65),
    calc(var(--css-blob-movement-speed) * 0.56),
    calc(var(--css-blob-breathing-speed) * 0.85);
}

.sn-css-blob:nth-child(5) {
  animation-delay: 
    calc(var(--css-blob-movement-speed) * 0.6),
    calc(var(--css-blob-breathing-speed) * 0.7),
    calc(var(--css-blob-movement-speed) * 0.9),
    calc(var(--css-blob-breathing-speed) * 0.8),
    calc(var(--css-blob-movement-speed) * 0.7),
    calc(var(--css-blob-breathing-speed) * 1.0);
}

.sn-css-blob:nth-child(6) {
  animation-delay: 
    calc(var(--css-blob-movement-speed) * 0.75),
    calc(var(--css-blob-breathing-speed) * 0.85),
    calc(var(--css-blob-movement-speed) * 1.05),
    calc(var(--css-blob-breathing-speed) * 0.95),
    calc(var(--css-blob-movement-speed) * 0.84),
    calc(var(--css-blob-breathing-speed) * 1.15);
}

/* Disable fluid animations when fluid flow is disabled */
.sn-css-blob-container[style*="--css-blob-fluid-flow: 0"] .sn-css-blob {
  animation: 
    css-blob-fluid-movement-1 var(--css-blob-movement-speed) ease-in-out infinite,
    css-blob-breathing-1 var(--css-blob-breathing-speed) ease-in-out infinite !important;
}

/* High visual effects sync intensity */
.sn-css-blob-container[style*="--css-blob-visual-effects-sync: 1"] .sn-css-blob {
  /* Enhanced visual effects osmosis with faster flow */
  animation-duration: 
    var(--css-blob-movement-speed),
    var(--css-blob-breathing-speed),
    calc(var(--css-blob-movement-speed) * 1.5),
    calc(var(--css-blob-breathing-speed) * 0.8),
    calc(var(--css-blob-movement-speed) * 0.6),
    calc(var(--css-blob-breathing-speed) * 2.0);
}

/* Enhanced emotional temperature responsiveness */
.sn-css-blob-container[style*="--css-blob-emotional-temperature: 1"] .sn-css-blob {
  /* High emotional temperature creates more dramatic effects */
  animation-timing-function: 
    cubic-bezier(0.25, 0.46, 0.45, 0.94),
    cubic-bezier(0.19, 1, 0.22, 1),
    cubic-bezier(0.25, 0.46, 0.45, 0.94),
    cubic-bezier(0.19, 1, 0.22, 1),
    cubic-bezier(0.25, 0.46, 0.45, 0.94),
    cubic-bezier(0.19, 1, 0.22, 1);
}

/* ============================================================================ */
/* UTILITY CLASSES */
/* ============================================================================ */

/* Disable CSS blob system */
.css-blob-disabled .sn-css-blob-container {
  display: none !important;
}

/* Enhanced blob system for dramatic moments */
.css-blob-enhanced .sn-css-blob {
  --css-blob-opacity: 0.6;
  --css-blob-saturation: 1.4;
  --css-blob-movement-speed: 5000ms;
  --css-blob-breathing-speed: 2500ms;
}

/* Minimal blob system for content focus */
.css-blob-minimal .sn-css-blob {
  --css-blob-opacity: 0.2;
  --css-blob-saturation: 0.9;
  --css-blob-blur-amount: 30px;
}

/* Debug mode - show blob boundaries */
html[data-debug="true"] .sn-css-blob {
  outline: 1px dashed rgba(var(--visual-effects-oklab-primary-rgb), 0.3);
}

// ==============================================
// Legacy Compatibility Aliases
// ==============================================
// Ensures backward compatibility during transition

// Keyframe aliases for legacy animation names
@keyframes css-blob-consciousness-osmosis {
  0% { transform: translateX(0) translateY(0) scale(1); }
  25% { transform: translateX(5px) translateY(-3px) scale(1.02); }
  50% { transform: translateX(-3px) translateY(4px) scale(0.98); }
  75% { transform: translateX(-4px) translateY(-2px) scale(1.01); }
  100% { transform: translateX(0) translateY(0) scale(1); }
}

@keyframes css-blob-organic-movement-1 {
  0% { transform: translateX(0%) translateY(0%) rotate(0deg); }
  25% { transform: translateX(2%) translateY(-1.5%) rotate(90deg); }
  50% { transform: translateX(-1%) translateY(2%) rotate(180deg); }
  75% { transform: translateX(-2%) translateY(-1%) rotate(270deg); }
  100% { transform: translateX(0%) translateY(0%) rotate(360deg); }
}

@keyframes css-blob-organic-movement-2 {
  0% { transform: translateX(0%) translateY(0%) rotate(0deg) scale(1); }
  33% { transform: translateX(-1.5%) translateY(1.5%) rotate(120deg) scale(1.05); }
  66% { transform: translateX(1%) translateY(-2%) rotate(240deg) scale(0.95); }
  100% { transform: translateX(0%) translateY(0%) rotate(360deg) scale(1); }
}