/* Living Gradient Base System - Phase 2.2 Base Transformation */
/* Transform static Catppuccin #1e1e2e into dynamic visual effects foundation */

// Import the unified breathing animation system from mixins (must be first)
@use "../../core/mixins" as *;

// Note: OKLAB animation and blending files archived in Phase 10 Week 4 (orphaned files)
// Using existing CSS variables for OKLAB functionality instead

/* ============================================================================ */
/* LIVING BASE VISUAL EFFECTS VARIABLES - CONSOLIDATED */
/* All variables now reference the unified design tokens from tokens.scss */
/* ============================================================================ */

:root {
  /* === Core Living Base Variables === */
  --living-base-gradient: linear-gradient(var(--spice-base), var(--spice-base)); /* Default fallback */
  
  /* === Animation Variables - Use Design System Values === */
  /* Reference unified breathing duration from design tokens */
  --visual-effects-breathing-duration: var(--sn-anim-breathing-effects); /* Music-responsive animation cycle */

  /* === Layer Control === */  
  --visual-effects-layer-opacity: var(--sn-ui-glass-opacity, 0.1); /* Layer opacity from design system */
}

/* ============================================================================ */
/* LIVING BASE BACKGROUND TRANSFORMATION */
/* ============================================================================ */

/* Transform the base application background into living visual effects */
body,
.Root__main-view,
.main-rootContainer-rootContainer {
  position: relative;

  /* Apply living base gradient as foundation */
  background: var(--living-base-gradient);

  /* Ensure smooth transitions */
  transition: background 800ms var(--sn-anim-easing-smooth, ease-out);
}

/* Enhanced living visual effects layer for main application */
.Root__main-view {
  /* Living visual effects foundation layer */
  &::before {
    /* Living visual effects background using design system tokens */
    background:
      /* Primary living gradient */
      var(--living-base-gradient),
      /* Enhanced radial gradient using design system colors */
      radial-gradient(
        ellipse at calc(
          50% + (var(--sn-music-rhythm-phase, 0deg) * 8%) + var(--sn-bg-gradient-flow-x, 0%)
        )
        calc(
          50% + (var(--sn-music-rhythm-phase, 0deg) * 6%) + var(--sn-bg-gradient-flow-y, 0%)
        ),
        /* Primary color with breathing intensity */
        rgba(
            var(--sn-musical-oklab-primary-rgb),
            calc(var(--sn-bg-gradient-opacity, 0.8) * var(--sn-musical-oklab-intensity, 0.5))
          )
          0%,
        /* Accent color with chroma adjustment */
        rgba(
            var(--sn-musical-oklab-accent-rgb),
            calc(var(--sn-bg-gradient-opacity, 0.8) * 0.6 * var(--sn-musical-oklab-intensity, 0.5))
          )
          40%,
        /* Highlight color with uniformity */
        rgba(
            var(--sn-musical-oklab-highlight-rgb),
            calc(var(--sn-bg-gradient-opacity, 0.8) * 0.3 * var(--sn-musical-oklab-intensity, 0.5))
          )
          70%,
        /* Shadow blend */
        rgba(var(--sn-musical-oklab-shadow-rgb), 0.02) 85%,
        var(--spice-base) 100%
      );

    /* Breathing animation scale using design system */
    transform: translateZ(0) scale(var(--sn-bg-gradient-flow-scale, 1.0));

    /* Enhanced opacity with musical responsiveness using design system */
    opacity: calc(
      var(--sn-bg-gradient-opacity, 0.8) *
      (0.8 + var(--sn-music-breathing-scale, 1.0) * 0.2) *
      (0.8 + var(--sn-music-energy-level, 0.5) * 0.4)
    );

    /* Color enhancement filters using design system */
    filter:
      saturate(var(--sn-bg-gradient-saturation, 1.1))
      brightness(var(--sn-bg-gradient-brightness, 1.0))
      hue-rotate(calc(var(--sn-music-rhythm-phase, 0deg) * 0.01))
      contrast(var(--sn-bg-gradient-contrast, 1.0));
  }
}

/* ============================================================================ */
/* OKLAB-ENHANCED VISUAL EFFECTS ANIMATIONS */
/* ============================================================================ */

/* OKLAB perceptually uniform color transitions for visual effects */
.living-gradient-oklab-animated {
  /* Apply OKLAB color transition mixins */
  // Standard CSS transition for background color changes
  transition: background var(--visual-effects-breathing-duration, 4000ms) ease-in-out;
  // Animation using CSS variables for OKLAB color processing
  animation: visual-effects-color-flow var(--visual-effects-breathing-duration, 4000ms) ease-in-out infinite;
  
  /* Enhanced OKLAB animations with perceptual uniformity */
  animation: 
    visual-effects-oklab-breathing var(--visual-effects-breathing-duration, 4000ms) ease-in-out infinite,
    visual-effects-oklab-color-flow calc(var(--visual-effects-breathing-duration, 4000ms) * 2) ease-in-out infinite;
}

/* Perceptual blending variants for living gradients */
.living-gradient-perceptual-blend {
  /* Apply perceptual gradient blending */
  // Standard CSS gradient blending (135deg angle, screen blend mode equivalent)
  background-blend-mode: screen;
  opacity: 0.8;
  
  /* Enhanced visual effects variant */
  &.visual-effects-enhanced {
    // OKLAB visual effects blending (inline CSS)
    background-blend-mode: multiply;
    mix-blend-mode: screen;
    // Musical gradient blending using CSS variables
    opacity: calc(var(--visual-effects-musical-intensity, 0.8) * 0.8);
  }
  
  /* Musical responsiveness with perceptual uniformity */
  &.musical-responsive {
    // OKLAB perceptual gradient (inline CSS)
    background: linear-gradient(135deg, 
      rgba(var(--visual-effects-oklab-primary-rgb), 0.8) 0%,
      rgba(var(--visual-effects-oklab-accent-rgb), 0.6) 100%);
    animation: 
      visual-effects-oklab-breathing var(--visual-effects-breathing-duration, 4000ms) ease-in-out infinite,
      oklab-perceptual-gradient-flow calc(var(--visual-effects-breathing-duration, 4000ms) * 3) ease-in-out infinite;
  }
}

/* Consolidated color flow animation using design system */
@keyframes visual-effects-color-flow {
  0%, 100% {
    filter: 
      saturate(var(--sn-bg-gradient-saturation, 1.1))
      brightness(var(--sn-bg-gradient-brightness, 1.0))
      hue-rotate(0deg)
      contrast(var(--sn-bg-gradient-contrast, 1.0));
  }
  50% {
    filter: 
      saturate(calc(var(--sn-bg-gradient-saturation, 1.1) * 1.2))
      brightness(calc(var(--sn-bg-gradient-brightness, 1.0) * 1.05))
      hue-rotate(calc(var(--sn-music-rhythm-phase, 0deg) * 0.02))
      contrast(calc(var(--sn-bg-gradient-contrast, 1.0) * 1.05));
  }
}

/* Unified breathing animation using design system - NO SCALING */
@keyframes visual-effects-breathing {
  0%, 100% {
    transform: translateZ(0);
    opacity: calc(var(--visual-effects-layer-opacity) * 0.9);
  }
  50% {
    transform: translateZ(0);
    opacity: calc(var(--visual-effects-layer-opacity) * 1.1);
  }
}

/* ============================================================================ */
/* UNIFIED FLOW ANIMATION - Using Design System Variables */
/* ============================================================================ */

@keyframes visual-effects-flow-animation {
  0%, 100% {
    background-position: 0% 0%;
  }
  50% {
    background-position: 
      calc(50% + var(--sn-bg-gradient-flow-x, 0%)) 
      calc(50% + var(--sn-bg-gradient-flow-y, 0%));
  }
}

/* ============================================================================ */
/* UNIFIED BREATHING SYSTEM - Using Central Mixin System */
/* ============================================================================ */

/* Apply breathing animation to living visual effects */
.Root__main-view::before {
  @media (prefers-reduced-motion: no-preference) {
    // Use unified breathing animation system with flow animation
    @include breathing-animation('gentle', --visual-effects-breathing-duration);
    animation-name: breathing-gentle, visual-effects-flow-animation;
    animation-duration: 
      var(--visual-effects-breathing-duration), 
      calc(var(--visual-effects-breathing-duration) * 2);
    animation-timing-function: ease-in-out, linear;
  }
}

/* ============================================================================ */
/* UNIFIED BREATHING CLASSES - Using Central Mixin System */
/* ============================================================================ */

.visual-effects-gentle-breathing {
  @include breathing-animation('gentle', --visual-effects-breathing-duration);
}

.visual-effects-energetic-breathing {
  @include breathing-animation('energetic', --visual-effects-breathing-duration);
}

.visual-effects-meditative-breathing {
  @include breathing-animation('meditative', --visual-effects-breathing-duration);
}

.visual-effects-cosmic-breathing {
  @include breathing-animation('cosmic', --visual-effects-breathing-duration);
}

/* Performance mode and accessibility handled by unified mixin system */

/* ============================================================================ */
/* VISUAL INTENSITY RESPONSIVE STYLING */
/* ============================================================================ */

/* High visual effects intensity - enhanced living base */
html[style*="--visual-effects-intensity-global: 1"],
html[data-visual-effects-level="high"] {
  --visual-effects-layer-opacity: 0.12;
  --visual-effects-breathing-intensity: 0.15;

  .Root__main-view::before {
    /* OKLAB-enhanced high visual effects intensity with perceptual uniformity */
    filter:
      saturate(calc(1.2 + var(--visual-effects-oklab-chroma) * 0.4))
      brightness(calc(1.1 * var(--visual-effects-oklab-luminance)))
      contrast(calc(1.1 + var(--visual-effects-oklab-chroma) * 0.2))
      hue-rotate(calc(var(--visual-effects-music-energy) * var(--visual-effects-oklab-hue) * 0.03deg));
  }
}

/* Medium visual effects intensity - balanced living base */
html[style*="--visual-effects-intensity-global: 0.5"],
html[data-visual-effects-level="medium"] {
  --visual-effects-layer-opacity: 0.08;
  --visual-effects-breathing-intensity: 0.10;
}

/* Low visual effects intensity - subtle living base */
html[style*="--visual-effects-intensity-global: 0"],
html[data-visual-effects-level="low"] {
  --visual-effects-layer-opacity: 0.04;
  --visual-effects-breathing-intensity: 0.06;

  .Root__main-view::before {
    filter: saturate(1.0) brightness(1.0) contrast(1.0);
  }
}

/* ============================================================================ */
/* MUSIC ENERGY RESPONSIVE ENHANCEMENTS */
/* ============================================================================ */

/* High energy music - vibrant living base */
html[style*="--visual-effects-music-energy: 1"] {
  --visual-effects-breathing-duration: var(--sn-anim-breathing-energetic); /* Faster breathing */

  .Root__main-view::before {
    animation-duration: 2000ms, 4000ms; /* Faster animations */
    /* OKLAB-enhanced high energy music with perceptual color processing */
    filter:
      saturate(calc(1.0 + var(--visual-effects-music-energy) * var(--visual-effects-oklab-chroma) * 0.5))
      brightness(calc(1.0 + var(--visual-effects-music-energy) * var(--visual-effects-oklab-luminance) * 0.3))
      contrast(calc(1.0 + var(--visual-effects-music-energy) * var(--visual-effects-oklab-chroma) * 0.3))
      hue-rotate(calc(var(--visual-effects-music-energy) * var(--visual-effects-oklab-hue) * 0.02deg));
  }
}

/* Low energy music - calm living base */
html[style*="--visual-effects-music-energy: 0"] {
  --visual-effects-breathing-duration: var(--sn-anim-breathing-cosmic); /* Slower breathing */

  .Root__main-view::before {
    animation-duration: 6000ms, 12000ms; /* Slower animations */
  }
}

/* ============================================================================ */
/* ACCESSIBILITY AND PERFORMANCE OPTIMIZATIONS */
/* ============================================================================ */

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  .Root__main-view::before {
    animation: none !important;
    transform: translateZ(0) scale(1) !important;
    transition: opacity 300ms ease !important;
  }

  :root {
    --visual-effects-breathing-phase: 0 !important;
    --visual-effects-flow-x: 0% !important;
    --visual-effects-flow-y: 0% !important;
    --visual-effects-flow-scale: 1 !important;
  }
}

/* Performance mode - simplified living base */
.sn-performance-mode {
  .Root__main-view::before {
    animation: none !important;
    transform: translateZ(0) !important;
    filter: none !important;
    background: var(--living-base-gradient) !important;
  }

  :root {
    --visual-effects-breathing-duration: calc(var(--sn-anim-breathing-cosmic) * 1.3) !important; /* Slower for performance */
  }
}

/* Battery optimization - minimal living base */
:root[data-sn-mode="battery-optimized"] {
  --visual-effects-layer-opacity: 0.02 !important;
  --visual-effects-breathing-intensity: 0.01 !important;
  --visual-effects-breathing-duration: calc(var(--sn-anim-breathing-cosmic) * 1.7) !important;

  .Root__main-view::before {
    animation: none !important;
    filter: none !important;
    transform: translateZ(0) !important;
  }
}

/* ============================================================================ */
/* UTILITY CLASSES FOR DYNAMIC CONTROL */
/* ============================================================================ */

/* Disable living base system */
.living-base-disabled {
  .Root__main-view::before {
    background: radial-gradient(
      ellipse at 50% 50%,
      rgba(var(--spice-rgb-accent), 0.1) 0%,
      var(--spice-base) 100%
    ) !important;
    animation: none !important;
    transform: translateZ(0) !important;
  }
}

/* OKLAB-enhanced living base for dramatic moments */
.living-base-enhanced {
  --visual-effects-layer-opacity: 0.15 !important;
  --visual-effects-breathing-intensity: 0.20 !important;
  --visual-effects-breathing-duration: calc(var(--sn-anim-breathing-energetic) * 1.5) !important;

  .Root__main-view::before {
    /* OKLAB-enhanced dramatic visual effects with perceptual uniformity */
    filter:
      saturate(calc(1.3 + var(--visual-effects-oklab-chroma) * 0.5))
      brightness(calc(1.2 * var(--visual-effects-oklab-luminance)))
      contrast(calc(1.2 + var(--visual-effects-oklab-chroma) * 0.3))
      hue-rotate(calc(var(--visual-effects-music-energy) * var(--visual-effects-oklab-hue) * 0.04deg)) !important;

    /* Enhanced OKLAB-based background for dramatic effect */
    background:
      radial-gradient(
        ellipse at center,
        rgba(var(--visual-effects-oklab-primary-rgb), calc(0.15 * var(--visual-effects-oklab-luminance))) 0%,
        rgba(var(--visual-effects-oklab-accent-rgb), calc(0.12 * var(--visual-effects-oklab-chroma))) 30%,
        rgba(var(--visual-effects-oklab-highlight-rgb), calc(0.08 * var(--visual-effects-oklab-luminance))) 60%,
        rgba(var(--visual-effects-oklab-shadow-rgb), 0.03) 85%,
        var(--spice-base) 100%
      ) !important;
  }
}

/* Minimal living base for content focus */
.living-base-minimal {
  --visual-effects-layer-opacity: 0.03 !important;
  --visual-effects-breathing-intensity: 0.02 !important;

  .Root__main-view::before {
    filter: saturate(1.0) brightness(1.0) contrast(1.0) !important;
  }
}

/* ============================================================================ */
/* DEBUG AND DEVELOPMENT UTILITIES */
/* ============================================================================ */

/* Development mode - show OKLAB-enhanced visual effects boundaries */
html[data-debug="true"] {
  .Root__main-view::before {
    outline: 1px dashed rgba(var(--visual-effects-oklab-primary-rgb), calc(0.3 * var(--visual-effects-oklab-chroma)));
  }

  .Root__main-view::after {
    outline: 1px dashed rgba(var(--visual-effects-oklab-accent-rgb), calc(0.2 * var(--visual-effects-oklab-luminance)));
  }
}

/* OKLAB-enhanced visual effects visualization for debugging */
.visual-effects-debug {
  .Root__main-view::before {
    background:
      /* Show OKLAB-enhanced living base gradient boundaries */
      var(--living-base-gradient),
      /* OKLAB-based visual effects area highlighting */
      radial-gradient(
        circle at 50% 50%,
        rgba(var(--visual-effects-oklab-primary-rgb), calc(0.15 * var(--visual-effects-oklab-chroma))) 0%,
        rgba(var(--visual-effects-oklab-accent-rgb), calc(0.1 * var(--visual-effects-oklab-luminance))) 25%,
        rgba(var(--visual-effects-oklab-highlight-rgb), calc(0.05 * var(--visual-effects-oklab-chroma))) 50%,
        transparent 75%
      );

    /* OKLAB-enhanced debug filter */
    filter:
      saturate(calc(1.5 + var(--visual-effects-oklab-chroma)))
      brightness(calc(1.3 * var(--visual-effects-oklab-luminance)))
      hue-rotate(calc(var(--visual-effects-oklab-hue) * 0.05deg));
  }
}

/* ============================================================================ */
/* STREAMLINED LEGACY COMPATIBILITY - Phase 4 Optimization */
/* Uses centralized legacy system from core/_mixins.scss */
/* ============================================================================ */

/* NOTE: Consciousness CSS variables are defined globally in core/_variable-compatibility.scss */

/* Essential consciousness → visual-effects class bridge using central system */
/* NOTE: All breathing classes now use opacity/filter effects only - no scale transforms */
/* This preserves Year 3000 music-reactive design without UI shaking */
.consciousness-gentle-breathing {
  @include legacy-consciousness-breathing('gentle');
}

.consciousness-energetic-breathing {
  @include legacy-consciousness-breathing('energetic');
}

.consciousness-meditative-breathing {
  @include legacy-consciousness-breathing('meditative');
}

.consciousness-cosmic-breathing {
  @include legacy-consciousness-breathing('cosmic');
}

.legacy-visual-effects-base-breathing {
  @include legacy-consciousness-breathing('gentle');
}

/* Legacy flow animation bridge */
.legacy-visual-effects-flow {
  animation: visual-effects-flow-animation calc(var(--visual-effects-breathing-duration) * 2) linear infinite;
}