// ████████████████████████████████████████████████████████████████████████████████
// YEAR 3000 PREDICTION EFFECTS - Advanced Glow & Pulse Systems
// ████████████████████████████████████████████████████████████████████████████████

// Static Glow: A persistent, soft glow
.sn-predict-static-glow {
  box-shadow: 0 0 calc(10px + 15px * var(--sn-prediction-confidence, 0))
    calc(2px + 3px * var(--sn-prediction-confidence, 0))
    var(--sn-predict-glow-color);
  border-radius: inherit; // Ensure glow follows element's border-radius
  transition: box-shadow 300ms ease-out;
}

// Subtle Glow: A very faint, almost ambient highlight
.sn-predict-subtle-glow {
  &::before {
    content: "";
    position: absolute;
    inset: -3px; // Control spread of the glow
    background: radial-gradient(
      ellipse at center,
      rgba(
          var(--sn-gradient-accent-rgb, var(--spice-rgb-accent)),
          calc(0.1 + 0.2 * var(--sn-prediction-confidence, 0))
            // Opacity from 0.1 to 0.3 based on confidence
        )
        0%,
      transparent 70%
    );
    border-radius: inherit;
    opacity: var(
      --sn-prediction-confidence,
      0.5
    ); // Overall opacity also tied to confidence, can be adjusted
    pointer-events: none;
    z-index: -1; // Ensure it's behind the element's content
    transition: opacity 300ms ease-out, background 300ms ease-out;
  }
}

@keyframes sn-pulse-animation {
  0% {
    transform: scale(1);
    opacity: calc(0.5 + 0.5 * var(--sn-prediction-confidence, 0));
  }
  50% {
    transform: scale(
      calc(1 + 0.03 * var(--sn-prediction-confidence, 0))
    ); // Max 3% scale based on confidence
    opacity: calc(
      0.8 + 0.2 * var(--sn-prediction-confidence, 0)
    ); // Max 100% opacity
  }
  100% {
    transform: scale(1);
    opacity: calc(0.5 + 0.5 * var(--sn-prediction-confidence, 0));
  }
}

// Generic Pulse: For effects like 'glow-pulse' or 'subtle-pulse' that need an animation
.sn-predict-pulse,
.sn-predict-subtle-pulse {
  animation: sn-pulse-animation
    calc(2000ms - (1000ms * var(--sn-prediction-confidence, 0))) ease-in-out
    // Speed from 2s to 1s
    infinite;
}

// Glow Pulse: Combines static glow with pulsing animation
.sn-predict-glow.sn-predict-pulse {
  // Applied when both classes are present
  position: relative; // Needed for ::after pseudo-element if used for glow

  &::after {
    // Pulsing glow effect
    content: "";
    position: absolute;
    inset: -2px; // Slightly larger than the element
    border-radius: inherit;
    box-shadow: 0 0 calc(8px + 12px * var(--sn-prediction-confidence, 0))
      var(--sn-predict-pulse-color);
    opacity: 0; // Animation will handle opacity
    animation: sn-glow-pulse-fade
      calc(2000ms - (1000ms * var(--sn-prediction-confidence, 0))) ease-in-out
      infinite;
    pointer-events: none;
    z-index: -1;
  }
}

@keyframes sn-glow-pulse-fade {
  0% {
    opacity: calc(
      0.3 * var(--sn-prediction-confidence, 0)
    ); // From 0% to 30% opacity based on confidence
  }
  50% {
    opacity: calc(
      0.7 * var(--sn-prediction-confidence, 0)
    ); // From 0% to 70% opacity
  }
  100% {
    opacity: calc(0.3 * var(--sn-prediction-confidence, 0));
  }
}

// Subtle Pulse: A less intrusive pulsing effect, maybe just a slight scale or opacity change
.sn-predict-subtle-pulse {
  // The main pulse animation (sn-pulse-animation) is already applied by the .sn-predict-pulse class.
  // This specific class can be used if subtle-pulse needs *different* base properties than glow-pulse before animation.
  // For example, if it should not have an ::after pseudo-element for a glow.
  // If its behavior is identical to .sn-predict-pulse for the base element itself, then it mainly serves
  // as a semantic marker for the JS to apply the correct combined classes like ".sn-predict .sn-predict-subtle-pulse".
}

// ████████████████████████████████████████████████████████████████████████████████
// STARRYNIGHT PREDICTION EFFECTS - Advanced Glow & Pulse Systems
// ████████████████████████████████████████████████████████████████████████████████
// TODO: Extract advanced animation and effect systems from main file
// TODO: Include organic emergence animations and modal effects
// TODO: Include harmonic oscillation and temporal echo effects
// TODO: Target file: src/systems/_sn_prediction_effects.scss

// Organic Emergence Animation
@keyframes sn-organic-emergence {
  0% {
    opacity: 0;
    transform: scale(0.85) translateY(20px);
    clip-path: ellipse(
      50% 20% at 50% 100%
    ); // Start as a flat ellipse at the bottom
  }
  60% {
    opacity: 0.9;
    transform: scale(1.02) translateY(-5px);
    clip-path: ellipse(150% 100% at 50% 50%); // Expand to a larger ellipse
  }
  100% {
    opacity: 1;
    transform: scale(1) translateY(0);
    clip-path: inset(
      0% 0% 0% 0% round var(--border-radius)
    ); // Settle to its final shape (using existing theme roundness)
  }
}

// Harmonic Oscillation Animation
@keyframes sn-harmonic-oscillation {
  0%,
  100% {
    box-shadow: inset 0 0 80px -15px rgba(var(--sn-gradient-primary-rgb), calc(0.25 *
            var(--sn-sidebar-harmonic-intensity-multiplier)));
  }
  50% {
    box-shadow: inset 0 0 100px -10px rgba(var(--sn-gradient-secondary-rgb), calc(0.35 *
            var(--sn-sidebar-harmonic-intensity-multiplier) * 1.2));
  }
}

// General Modal & Popup Styling
.GenericModal__overlay,
.encore-context-menu-container, // Covers the backdrop for context menus
body > div[role="dialog"] > div:first-child, // Common pattern for modal backdrops
body > div[data-encore-id="popover"] > div:first-child {
  // Popover backdrops
  background-color: rgba(
    var(--spice-rgb-base, "30,30,46"),
    0.3
  ) !important; // Slightly dimmed theme base for backdrop
  backdrop-filter: blur(
    calc(var(--sn-modal-blur-intensity) * 0.5)
  ); // Less blur on overlay
}

.GenericModal__content,
.encore-context-menu,
.encore-dropdown-menu, // Another common class for dropdowns
.encore-popover__content,
div[role="dialog"] {
  // Critical: Ensure these elements are not entirely opaque by default from Spicetify's CSS
  background: transparent !important; // Make the main modal/menu container transparent
  color: var(--spice-text) !important; // Ensure text is readable
  border: 1px solid
    rgba(var(--sn-modal-border-color-rgb), var(--sn-modal-border-opacity));
  border-radius: var(--border-radius); // Use existing theme border-radius
  box-shadow: 0 8px 32px 0
    rgba(var(--sn-oklab-processed-dynamic-shadow-rgb), 0.37); // Soft shadow
  overflow: hidden; // Important for pseudo-elements and clip-paths
  position: relative; // For pseudo-elements
  transform-origin: center center;

  // Shared Consciousness Layer (as background)
  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -1; // Behind the content
    border-radius: inherit; // Match parent's border-radius

    // Use sidebar's background layers, but dimmed and potentially simpler
    background-image:
      // 1. Dimmed Consciousness Layer (Primary Gradient)
      radial-gradient(
        ellipse at 70% 30%,
        hsla(
          from
            oklch(
              var(--sn-oklab-primary-l, 0.6)
                var(--sn-oklab-primary-chroma, 0.15)
                var(--sn-oklab-primary-hue, 280)
            )
            calc(l - 0.05) calc(c * 0.8) h /
            calc(var(--sn-modal-bg-opacity) * 0.7)
        ),
        transparent 60%
      ),
      // 2. Dimmed Neural Flow (Secondary Gradient)
      radial-gradient(
          ellipse at 30% 70%,
          hsla(
            from
              oklch(
                var(--sn-oklab-secondary-l, 0.6)
                  var(--sn-oklab-secondary-chroma, 0.1)
                  var(--sn-oklab-secondary-hue, 260)
              )
              calc(l - 0.08) calc(c * 0.7) h /
              calc(var(--sn-modal-bg-opacity) * 0.6)
          ),
          transparent 55%
        );
    opacity: var(--sn-modal-bg-opacity); // Control overall layer opacity
    filter: blur(var(--sn-modal-blur-intensity))
      saturate(var(--sn-gradient-saturation))
      brightness(var(--sn-gradient-brightness))
      contrast(var(--sn-gradient-contrast));
    background-blend-mode: screen;
    transition: opacity var(--sn-gradient-transition),
      filter var(--sn-gradient-transition); // Match sidebar transition
  }

  // Trigger for Organic Emergence
  &.sn-dimensional-modal-emerging {
    animation: sn-organic-emergence var(--sn-modal-emergence-duration)
      var(--sn-modal-emergence-timing-function) forwards;
  }
}

// Alias: deprecated class names from early prototype mapped to new unified naming
.sn-predict-glow {
  @extend .sn-predict-static-glow;
}

.sn-predict-subtle-glow {
  // already defined above; keep as is
}

// Ensure pulse-only class exists for default subtle glow animations
// .sn-predict-pulse {
//   @extend .sn-predict-pulse;
// }

// TODO[Y3K-PH3]: Materialization resonance glow (driven by --sn-materialize-* vars)
.sn-predict-materialize-glow {
  position: relative;
  border-radius: inherit;
  transition: box-shadow 300ms ease-out;
  box-shadow: 0 0 calc(6px + 14px * var(--sn-materialize-clarity, 0))
    rgba(
      var(--sn-gradient-accent-rgb, var(--spice-rgb-accent)),
      calc(0.1 + 0.4 * var(--sn-materialize-imminence, 0))
    );
}