// ████████████████████████████████████████████████████████████████████████████████
// PERCEPTUAL COLOR BLENDING - OKLAB-Based Gradient & Overlay System
// ████████████████████████████████████████████████████████████████████████████████

// === PERCEPTUAL BLENDING FOUNDATION ===
// Advanced color blending using OKLAB color space for natural, harmonious mixing
// that respects human vision and musical consciousness for organic visual experiences.

// OKLAB-based gradient blending mixin
@mixin oklab-gradient-blend($direction: 135deg, $blend-mode: normal, $opacity: 1.0) {
  // Create perceptually uniform gradient using OKLAB variables
  background: linear-gradient(
    #{$direction},
    // Primary OKLAB color with perceptual weighting
    rgba(var(--sn-musical-oklab-primary-rgb), calc(#{$opacity} * var(--visual-effects-oklab-luminance, 1.0) * 0.8)) 0%,
    // Intermediate blend using separate color variable (CSS doesn't support math in rgba)
    rgba(var(--sn-musical-oklab-accent-rgb), calc(#{$opacity} * var(--visual-effects-oklab-luminance, 1.0) * 0.6)) 25%,
    // Accent color with chroma consideration
    rgba(var(--sn-musical-oklab-accent-rgb), calc(#{$opacity} * var(--visual-effects-oklab-chroma, 1.0) * 0.7)) 50%,
    // Complementary blend using complementary variable
    rgba(var(--sn-musical-oklab-complementary-rgb), calc(#{$opacity} * var(--visual-effects-oklab-luminance, 1.0) * 0.5)) 75%,
    // Return to primary with perceptual completion
    rgba(var(--sn-musical-oklab-primary-rgb), calc(#{$opacity} * var(--visual-effects-oklab-luminance, 1.0) * 0.3)) 100%
  );
  
  // Apply perceptual blend mode
  mix-blend-mode: #{$blend-mode};
  
  // OKLAB-aware filter enhancements
  filter: 
    saturate(calc(1.0 + var(--visual-effects-oklab-chroma, 1.0) * 0.2))
    brightness(calc(var(--visual-effects-oklab-luminance, 1.0) * 1.05))
    hue-rotate(calc(var(--visual-effects-oklab-hue, 0) * 0.01deg));
}

// Perceptual overlay blending mixin
@mixin oklab-overlay-blend($base-color-var, $overlay-color-var, $blend-strength: 0.5) {
  // Create perceptually uniform overlay
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    
    // Base layer with OKLAB awareness
    background: rgba(var(#{$base-color-var}), calc(var(--visual-effects-oklab-luminance, 1.0) * 0.8));
    
    // Perceptual blending
    mix-blend-mode: multiply;
    opacity: calc(1.0 - #{$blend-strength});
    pointer-events: none;
    z-index: 0;
  }
  
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    
    // Overlay layer with chroma consideration
    background: rgba(var(#{$overlay-color-var}), calc(var(--visual-effects-oklab-chroma, 1.0) * #{$blend-strength}));
    
    // Advanced perceptual blending
    mix-blend-mode: screen;
    opacity: #{$blend-strength};
    pointer-events: none;
    z-index: 1;
  }
}

// Musical audio-visual gradient blending
@mixin musical-gradient-blend($intensity: 1.0) {
  // Create music-responsive gradient using OKLAB harmony
  background: radial-gradient(
    ellipse at center,
    // Core audio-visual color
    rgba(var(--sn-musical-oklab-primary-rgb), calc(var(--visual-effects-emotional-saturation, 1) * #{$intensity} * 0.15)) 0%,
    // First harmonic layer - use accent color directly
    rgba(var(--sn-musical-oklab-accent-rgb), calc(var(--visual-effects-warmth, 0.8) * #{$intensity} * 0.12)) 20%,
    // Musical harmony blend
    rgba(var(--sn-musical-oklab-accent-rgb), calc(var(--visual-effects-audio-resonance, 0.7) * #{$intensity} * 0.1)) 40%,
    // Emotional temperature layer - use complementary color directly
    rgba(var(--sn-musical-oklab-complementary-rgb), calc(var(--visual-effects-emotional-saturation, 1) * #{$intensity} * 0.08)) 60%,
    // Outer audio-visual field
    rgba(var(--sn-musical-oklab-complementary-rgb), calc(var(--visual-effects-warmth, 0.8) * #{$intensity} * 0.05)) 80%,
    // Infinite fade to transparency
    transparent 100%
  );
  
  // Apply musical audio-visual blending
  mix-blend-mode: color-burn;
  
  // Dynamic filter based on musical state
  filter: 
    saturate(calc(1.0 + var(--visual-effects-emotional-saturation, 1) * 0.3))
    brightness(calc(1.0 + var(--visual-effects-warmth, 0.8) * 0.1))
    hue-rotate(calc(var(--visual-effects-audio-resonance, 0.7) * 15deg));
}

// === ADVANCED BLENDING CLASSES ===

// Perceptual gradient overlay
.oklab-perceptual-gradient {
  @include oklab-gradient-blend(135deg, screen, 0.8);
  
  // Enhanced for visual-effects backgrounds
  &.visual-effects-enhanced {
    @include oklab-gradient-blend(45deg, overlay, 1.0);
    // animation: oklab-perceptual-gradient-flow calc(var(--visual-effects-breathing-cycle, 1s) * 6) ease-in-out infinite; // DISABLED: Caused global app bouncing
  }
  
  // Musical responsiveness variant
  &.musical-responsive {
    @include musical-gradient-blend(var(--visual-effects-musical-intensity, 0.8));
    // animation: oklab-musical-gradient-evolution calc(var(--visual-effects-breathing-cycle, 1s) * 4) ease-in-out infinite; // DISABLED: Caused global app bouncing
  }
}

// Advanced overlay blending
.oklab-overlay-blend {
  @include oklab-overlay-blend(--sn-musical-oklab-primary-rgb, --sn-musical-oklab-accent-rgb, 0.6);
  
  // Genre-specific overlay blending
  &[data-genre-blend="electronic"] {
    @include oklab-overlay-blend(--sn-genre-electronic-oklab-primary-rgb, --sn-genre-electronic-oklab-accent-rgb, 0.8);
    mix-blend-mode: hard-light;
  }
  
  &[data-genre-blend="classical"] {
    @include oklab-overlay-blend(--sn-genre-classical-oklab-primary-rgb, --sn-genre-classical-oklab-accent-rgb, 0.4);
    mix-blend-mode: soft-light;
  }
  
  &[data-genre-blend="rock"] {
    @include oklab-overlay-blend(--sn-genre-rock-oklab-primary-rgb, --sn-genre-rock-oklab-accent-rgb, 0.9);
    mix-blend-mode: multiply;
  }
  
  &[data-genre-blend="ambient"] {
    @include oklab-overlay-blend(--sn-genre-ambient-oklab-primary-rgb, --sn-genre-ambient-oklab-accent-rgb, 0.3);
    mix-blend-mode: luminosity;
  }
}

// Visual-effects-aware color mixing
.oklab-visual-effects-blend {
  position: relative;
  
  // Primary visual-effects layer
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    
    @include oklab-gradient-blend(90deg, multiply, 0.7);
    z-index: 0;
    pointer-events: none;
  }
  
  // Secondary visual-effects layer
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    
    @include musical-gradient-blend(0.9);
    z-index: 1;
    pointer-events: none;
    opacity: calc(var(--visual-effects-cinematic-intensity, 0.8) * 0.8);
  }
  
  // Enhanced visual-effects mode
  &.visual-effects-maximum {
    &::before {
      @include oklab-gradient-blend(180deg, screen, 1.0);
      // animation: oklab-visual-effects-pulse calc(var(--visual-effects-breathing-cycle, 1s) * 2) ease-in-out infinite; // DISABLED: Caused global app bouncing
    }
    
    &::after {
      @include musical-gradient-blend(1.2);
      // animation: oklab-visual-effects-flow calc(var(--visual-effects-breathing-cycle, 1s) * 3) ease-in-out infinite; // DISABLED: Caused global app bouncing
    }
  }
}

// Advanced atmospheric blending
.oklab-atmospheric-blend {
  // Multi-layer atmospheric blending
  background: 
    // Foreground atmospheric layer
    radial-gradient(
      circle at 30% 70%,
      rgba(var(--sn-musical-oklab-primary-rgb), calc(var(--visual-effects-fog-opacity, 0.02) * 8)) 0%,
      rgba(var(--sn-musical-oklab-accent-rgb), calc(var(--visual-effects-fog-opacity, 0.02) * 6)) 30%,
      transparent 60%
    ),
    // Mid-layer atmospheric blend
    radial-gradient(
      circle at 70% 30%,
      rgba(var(--sn-musical-oklab-accent-rgb), calc(var(--visual-effects-fog-opacity, 0.02) * 6)) 0%,
      rgba(var(--sn-musical-oklab-complementary-rgb), calc(var(--visual-effects-fog-opacity, 0.02) * 4)) 40%,
      transparent 70%
    ),
    // Background atmospheric foundation
    linear-gradient(
      225deg,
      rgba(var(--sn-musical-oklab-complementary-rgb), calc(var(--visual-effects-fog-opacity, 0.02) * 4)) 0%,
      rgba(var(--sn-musical-oklab-primary-rgb), calc(var(--visual-effects-fog-opacity, 0.02) * 2)) 100%
    );
  
  // Advanced atmospheric blending
  mix-blend-mode: color-dodge;
  
  // Atmospheric breathing animation - DISABLED: Caused global app bouncing
  // animation: oklab-atmospheric-visual-effects calc(var(--visual-effects-breathing-cycle, 1s) * 5) ease-in-out infinite;
}

// === PERCEPTUAL BLENDING KEYFRAMES ===

// Perceptual gradient flow animation
@keyframes oklab-perceptual-gradient-flow {
  0% {
    background-position: 0% 50%;
    filter: 
      saturate(calc(1.0 + var(--visual-effects-oklab-chroma, 1.0) * 0.1))
      brightness(calc(var(--visual-effects-oklab-luminance, 1.0) * 1.0));
  }
  
  25% {
    background-position: 100% 50%;
    filter: 
      saturate(calc(1.0 + var(--visual-effects-oklab-chroma, 1.0) * 0.25))
      brightness(calc(var(--visual-effects-oklab-luminance, 1.0) * 1.05))
      hue-rotate(calc(var(--visual-effects-oklab-hue, 0) * 0.01deg));
  }
  
  50% {
    background-position: 100% 100%;
    filter: 
      saturate(calc(1.0 + var(--visual-effects-oklab-chroma, 1.0) * 0.3))
      brightness(calc(var(--visual-effects-oklab-luminance, 1.0) * 1.1))
      hue-rotate(calc(var(--visual-effects-oklab-hue, 0) * 0.015deg));
  }
  
  75% {
    background-position: 0% 100%;
    filter: 
      saturate(calc(1.0 + var(--visual-effects-oklab-chroma, 1.0) * 0.25))
      brightness(calc(var(--visual-effects-oklab-luminance, 1.0) * 1.05))
      hue-rotate(calc(var(--visual-effects-oklab-hue, 0) * 0.01deg));
  }
  
  100% {
    background-position: 0% 50%;
    filter: 
      saturate(calc(1.0 + var(--visual-effects-oklab-chroma, 1.0) * 0.1))
      brightness(calc(var(--visual-effects-oklab-luminance, 1.0) * 1.0));
  }
}

// Musical gradient evolution animation
@keyframes oklab-musical-gradient-evolution {
  0% {
    filter: 
      saturate(calc(1.0 + var(--visual-effects-emotional-saturation, 1) * 0.2))
      brightness(calc(1.0 + var(--visual-effects-warmth, 0.8) * 0.05))
      hue-rotate(0deg);
  }
  
  33% {
    filter: 
      saturate(calc(1.0 + var(--visual-effects-emotional-saturation, 1) * 0.4))
      brightness(calc(1.0 + var(--visual-effects-warmth, 0.8) * 0.15))
      hue-rotate(calc(var(--visual-effects-audio-resonance, 0.7) * 8deg));
  }
  
  66% {
    filter: 
      saturate(calc(1.0 + var(--visual-effects-emotional-saturation, 1) * 0.6))
      brightness(calc(1.0 + var(--visual-effects-warmth, 0.8) * 0.25))
      hue-rotate(calc(var(--visual-effects-audio-resonance, 0.7) * 15deg));
  }
  
  100% {
    filter: 
      saturate(calc(1.0 + var(--visual-effects-emotional-saturation, 1) * 0.2))
      brightness(calc(1.0 + var(--visual-effects-warmth, 0.8) * 0.05))
      hue-rotate(0deg);
  }
}

// Visual effects pulse animation
@keyframes oklab-visual-effects-pulse {
  0% {
    opacity: calc(var(--visual-effects-cinematic-intensity, 0.8) * 0.7);
    transform: scale(1.0);
  }
  
  50% {
    opacity: calc(var(--visual-effects-cinematic-intensity, 0.8) * 1.0);
    transform: scale(1.02);
  }
  
  100% {
    opacity: calc(var(--visual-effects-cinematic-intensity, 0.8) * 0.7);
    transform: scale(1.0);
  }
}

// Visual effects flow animation
@keyframes oklab-visual-effects-flow {
  0% {
    opacity: calc(var(--visual-effects-cinematic-intensity, 0.8) * 0.8);
    transform: rotate(0deg) scale(1.0);
  }
  
  25% {
    opacity: calc(var(--visual-effects-cinematic-intensity, 0.8) * 0.9);
    transform: rotate(90deg) scale(1.05);
  }
  
  50% {
    opacity: calc(var(--visual-effects-cinematic-intensity, 0.8) * 1.0);
    transform: rotate(180deg) scale(1.1);
  }
  
  75% {
    opacity: calc(var(--visual-effects-cinematic-intensity, 0.8) * 0.9);
    transform: rotate(270deg) scale(1.05);
  }
  
  100% {
    opacity: calc(var(--visual-effects-cinematic-intensity, 0.8) * 0.8);
    transform: rotate(360deg) scale(1.0);
  }
}

// Atmospheric visual effects animation
@keyframes oklab-atmospheric-visual-effects {
  0% {
    background-position: 0% 0%, 0% 0%, 0% 0%;
    filter: 
      saturate(calc(1.0 + var(--visual-effects-emotional-saturation, 1) * 0.1))
      brightness(calc(1.0 + var(--visual-effects-warmth, 0.8) * 0.05));
  }
  
  25% {
    background-position: 25% 25%, 75% 25%, 12% 50%;
    filter: 
      saturate(calc(1.0 + var(--visual-effects-emotional-saturation, 1) * 0.25))
      brightness(calc(1.0 + var(--visual-effects-warmth, 0.8) * 0.12))
      hue-rotate(calc(var(--visual-effects-audio-resonance, 0.7) * 5deg));
  }
  
  50% {
    background-position: 50% 50%, 50% 50%, 25% 100%;
    filter: 
      saturate(calc(1.0 + var(--visual-effects-emotional-saturation, 1) * 0.3))
      brightness(calc(1.0 + var(--visual-effects-warmth, 0.8) * 0.15))
      hue-rotate(calc(var(--visual-effects-audio-resonance, 0.7) * 10deg));
  }
  
  75% {
    background-position: 75% 75%, 25% 75%, 37% 150%;
    filter: 
      saturate(calc(1.0 + var(--visual-effects-emotional-saturation, 1) * 0.25))
      brightness(calc(1.0 + var(--visual-effects-warmth, 0.8) * 0.12))
      hue-rotate(calc(var(--visual-effects-audio-resonance, 0.7) * 5deg));
  }
  
  100% {
    background-position: 100% 100%, 0% 100%, 50% 200%;
    filter: 
      saturate(calc(1.0 + var(--visual-effects-emotional-saturation, 1) * 0.1))
      brightness(calc(1.0 + var(--visual-effects-warmth, 0.8) * 0.05));
  }
}

// === ACCESSIBILITY AND PERFORMANCE ===

// Reduced motion support for perceptual blending
@media (prefers-reduced-motion: reduce) {
  .oklab-perceptual-gradient,
  .oklab-overlay-blend,
  .oklab-visual-effects-blend,
  .oklab-atmospheric-blend {
    animation: none !important;
    
    &::before,
    &::after {
      animation: none !important;
    }
  }
}

// High contrast support for perceptual blending
@media (prefers-contrast: high) {
  .oklab-perceptual-gradient,
  .oklab-overlay-blend,
  .oklab-visual-effects-blend {
    filter: 
      contrast(2.0) !important
      saturate(1.8) !important
      brightness(1.2) !important;
  }
}

// Performance optimization for low-end devices
@media (update: slow) {
  .oklab-atmospheric-blend {
    background: 
      rgba(var(--sn-musical-oklab-primary-rgb), calc(var(--visual-effects-fog-opacity, 0.02) * 4)) !important;
    
    animation-duration: calc(var(--visual-effects-breathing-cycle, 1s) * 10) !important;
  }
  
  .oklab-visual-effects-blend {
    &::before,
    &::after {
      animation-duration: calc(var(--visual-effects-breathing-cycle, 1s) * 8) !important;
      will-change: auto !important;
    }
  }
}

// Debug mode for perceptual blending
:root.visual-effects-debug {
  .oklab-perceptual-gradient,
  .oklab-overlay-blend,
  .oklab-visual-effects-blend,
  .oklab-atmospheric-blend {
    outline: 1px dashed rgba(var(--sn-musical-harmony-triadic-rgb), 0.8) !important;
    
    &::after {
      content: '🎨 BLEND';
      position: absolute;
      bottom: -20px;
      right: 0;
      font-size: 9px;
      color: rgb(var(--sn-musical-harmony-triadic-rgb));
      background: rgba(var(--spice-rgb-base), 0.9);
      padding: 1px 3px;
      border-radius: 2px;
      pointer-events: none;
      z-index: 9999;
    }
  }
}

// === LEGACY COMPATIBILITY CLASSES ===
// These provide backward compatibility during the transition

// Legacy perceptual blending classes
.oklab-consciousness-blend {
  @extend .oklab-visual-effects-blend !optional;
}

// Legacy enhanced mode
.consciousness-enhanced {
  @extend .visual-effects-enhanced !optional;
}

.consciousness-maximum {
  @extend .visual-effects-maximum !optional;
}