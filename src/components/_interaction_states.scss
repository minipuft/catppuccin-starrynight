/**
 * Phase 2: CSS Micro-Tweens for Beat-Responsive Interaction Suite
 * 
 * Provides lightweight CSS-only micro-interactions that pulse with music beats.
 * Uses the unified --sn-kinetic-energy variable established in Phase 1.
 */

// Beat-responsive scale animation keyframes
@keyframes sn-beat-scale {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  35% {
    transform: scale(1.03);
    opacity: 0.98;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

// Alternative subtle pulse for less prominent elements
@keyframes sn-beat-pulse-subtle {
  0% {
    opacity: 1;
    filter: brightness(1);
  }
  50% {
    opacity: 0.95;
    filter: brightness(1.05);
  }
  100% {
    opacity: 1;
    filter: brightness(1);
  }
}

/**
 * Primary beat-responsive class
 * Elements with this class will pulse with detected beats
 */
.sn-beat-responsive {
  --_sn-pulse-intensity: var(--sn-beat-pulse, 0);
  
  // Use animation-play-state for performance optimization
  // When paused, animation has zero CPU cost
  animation: sn-beat-scale 300ms var(--sn-anim-easing-standard) forwards;
  animation-play-state: var(--_sn-pulse-intensity, paused);
  
  // Accessibility: Respect reduced motion preference
  @media (prefers-reduced-motion: reduce) {
    animation: none;
    transform: none !important;
  }
}

/**
 * Subtle variant for secondary elements
 */
.sn-beat-responsive--subtle {
  --_sn-pulse-intensity: var(--sn-beat-pulse, 0);
  
  animation: sn-beat-pulse-subtle 250ms var(--sn-anim-easing-standard) forwards;
  animation-play-state: var(--_sn-pulse-intensity, paused);
  
  @media (prefers-reduced-motion: reduce) {
    animation: none;
    filter: none !important;
  }
}

/**
 * Alternative implementation using transform and opacity variables
 * For elements that need more precise control
 */
.sn-beat-responsive--custom {
  // Controlled directly via CSS variables without keyframe animation
  transform: scale(calc(1 + var(--sn-kinetic-energy, 0) * 0.03));
  opacity: calc(1 - var(--sn-kinetic-energy, 0) * 0.02);
  
  // Smooth transitions when kinetic energy changes
  transition: 
    transform 100ms var(--sn-anim-easing-standard),
    opacity 100ms var(--sn-anim-easing-standard);
  
  @media (prefers-reduced-motion: reduce) {
    transform: scale(1) !important;
    opacity: 1 !important;
    transition: none;
  }
}

/**
 * Beat-responsive glow effect for accent elements
 */
.sn-beat-glow {
  --_sn-glow-intensity: calc(var(--sn-kinetic-energy, 0) * 0.3);
  
  box-shadow: 
    0 0 calc(var(--_sn-glow-intensity) * 20px) 
    rgba(var(--sn-accent-rgb, 140, 170, 238), var(--_sn-glow-intensity));
  
  transition: box-shadow 150ms var(--sn-anim-easing-standard);
  
  @media (prefers-reduced-motion: reduce) {
    box-shadow: none !important;
    transition: none;
  }
}

/**
 * Helper class to control beat pulse timing
 * Can be toggled via JavaScript to trigger animations
 */
.sn-beat-active {
  --sn-beat-pulse: 1;
}

/**
 * Performance optimization: Disable beat effects during high CPU usage
 * This class can be added programmatically when performance is degraded
 */
.sn-performance-mode {
  .sn-beat-responsive,
  .sn-beat-responsive--subtle,
  .sn-beat-responsive--custom {
    animation: none !important;
    transform: scale(1) !important;
    opacity: 1 !important;
    transition: none !important;
  }
  
  .sn-beat-glow {
    box-shadow: none !important;
    transition: none !important;
  }
}

/**
 * Integration with existing Spotify UI elements
 * Apply beat responsiveness to common interactive elements
 */

// Apply to card elements that don't interfere with existing hover states
[data-testid="card"]:not(.sn-performance-mode .sn-beat-responsive),
.main-card-card:not(.sn-performance-mode .sn-beat-responsive) {
  @extend .sn-beat-responsive--subtle !optional;
}

// Apply to now playing area elements
.main-nowPlayingWidget-nowPlaying:not(.sn-performance-mode .sn-beat-responsive) {
  @extend .sn-beat-responsive--custom !optional;
}

// Apply glow to accent buttons when beat is active
.main-playButton-PlayButton:not(.sn-performance-mode .sn-beat-responsive),
.control-button:not(.sn-performance-mode .sn-beat-responsive) {
  @extend .sn-beat-glow !optional;
}